[{"D:\\SKRIPSI\\gowes\\client\\src\\index.js":"1","D:\\SKRIPSI\\gowes\\client\\src\\App.js":"2","D:\\SKRIPSI\\gowes\\client\\src\\reportWebVitals.js":"3","D:\\SKRIPSI\\gowes\\client\\src\\ApolloProvider.js":"4","D:\\SKRIPSI\\gowes\\client\\src\\pages\\Home.js":"5","D:\\SKRIPSI\\gowes\\client\\src\\pages\\SinglePost.js":"6","D:\\SKRIPSI\\gowes\\client\\src\\components\\PostForm.js":"7","D:\\SKRIPSI\\gowes\\client\\src\\components\\PostCard.js":"8","D:\\SKRIPSI\\gowes\\client\\src\\components\\DeleteButton.js":"9","D:\\SKRIPSI\\gowes\\client\\src\\components\\LikeButton.js":"10","D:\\SKRIPSI\\gowes\\client\\src\\components\\MyPopup.js":"11","D:\\SKRIPSI\\gowes\\client\\src\\context\\auth.js":"12","D:\\SKRIPSI\\gowes\\client\\src\\util\\graphql.js":"13","D:\\SKRIPSI\\gowes\\client\\src\\util\\hooks.js":"14","D:\\SKRIPSI\\gowes\\client\\src\\util\\AuthRoute.js":"15","D:\\SKRIPSI\\gowes\\client\\src\\components\\NavBar.js":"16","D:\\SKRIPSI\\gowes\\client\\src\\pages\\Event.js":"17","D:\\SKRIPSI\\gowes\\client\\src\\components\\Footer.js":"18","D:\\SKRIPSI\\gowes\\client\\src\\components\\ShopCard.js":"19","D:\\SKRIPSI\\gowes\\client\\src\\components\\BookmarkButton.js":"20","D:\\SKRIPSI\\gowes\\client\\src\\components\\FilterBar.js":"21","D:\\SKRIPSI\\gowes\\client\\src\\pages\\Cart.js":"22","D:\\SKRIPSI\\gowes\\client\\src\\pages\\Bookmark.js":"23","D:\\SKRIPSI\\gowes\\client\\src\\pages\\Profile.js":"24","D:\\SKRIPSI\\gowes\\client\\src\\components\\SidebarProfile.js":"25","D:\\SKRIPSI\\gowes\\client\\src\\components\\ProfileCard.js":"26","D:\\SKRIPSI\\gowes\\client\\src\\firebase\\index.js":"27","D:\\SKRIPSI\\gowes\\client\\src\\pages\\MyStore.js":"28","D:\\SKRIPSI\\gowes\\client\\src\\components\\SidebarStore.js":"29","D:\\SKRIPSI\\gowes\\client\\src\\pages\\ItemDetail.js":"30","D:\\SKRIPSI\\gowes\\client\\src\\components\\EditMyStoreDetailsCard.js":"31","D:\\SKRIPSI\\gowes\\client\\src\\components\\MyStoreDetailsCard.js":"32","D:\\SKRIPSI\\gowes\\client\\src\\components\\EditProfileCard.js":"33","D:\\SKRIPSI\\gowes\\client\\src\\components\\MyItemList.js":"34","D:\\SKRIPSI\\gowes\\client\\src\\components\\MyItemsCard.js":"35","D:\\SKRIPSI\\gowes\\client\\src\\pages\\AddItem.js":"36","D:\\SKRIPSI\\gowes\\client\\src\\components\\ItemTransactionCard.js":"37","D:\\SKRIPSI\\gowes\\client\\src\\components\\ItemDetailCard.js":"38","D:\\SKRIPSI\\gowes\\client\\src\\components\\ItemImagesCard.js":"39","D:\\SKRIPSI\\gowes\\client\\src\\components\\ItemReviewsCard.js":"40","D:\\SKRIPSI\\gowes\\client\\src\\components\\CartCard.js":"41","D:\\SKRIPSI\\gowes\\client\\src\\components\\ItemCartCard.js":"42","D:\\SKRIPSI\\gowes\\client\\src\\components\\ItemSummaryCard.js":"43","D:\\SKRIPSI\\gowes\\client\\src\\components\\ReviewSummaryCard.js":"44","D:\\SKRIPSI\\gowes\\client\\src\\components\\ProgressBar.js":"45","D:\\SKRIPSI\\gowes\\client\\src\\components\\MyOrders.js":"46","D:\\SKRIPSI\\gowes\\client\\src\\components\\CardMyOrders.js":"47","D:\\SKRIPSI\\gowes\\client\\src\\components\\ItemMyOrders.js":"48","D:\\SKRIPSI\\gowes\\client\\src\\components\\ManageItemSticky.js":"49","D:\\SKRIPSI\\gowes\\client\\src\\components\\DeleteItemButton.js":"50","D:\\SKRIPSI\\gowes\\client\\src\\pages\\SellerProfile.js":"51","D:\\SKRIPSI\\gowes\\client\\src\\components\\SideBarSellerProfile.js":"52","D:\\SKRIPSI\\gowes\\client\\src\\pages\\EditItem.js":"53","D:\\SKRIPSI\\gowes\\client\\src\\components\\chat\\ChatFloatingButton.js":"54","D:\\SKRIPSI\\gowes\\client\\src\\components\\chat\\ChatFloatingCard.js":"55","D:\\SKRIPSI\\gowes\\client\\src\\pages\\Checkout.js":"56","D:\\SKRIPSI\\gowes\\client\\src\\components\\ItemSummaryCheckout.js":"57","D:\\SKRIPSI\\gowes\\client\\src\\components\\CheckoutCard.js":"58","D:\\SKRIPSI\\gowes\\client\\src\\components\\ItemCheckoutCard.js":"59","D:\\SKRIPSI\\gowes\\client\\src\\pages\\Authentication\\Register.js":"60","D:\\SKRIPSI\\gowes\\client\\src\\pages\\Authentication\\Login.js":"61","D:\\SKRIPSI\\gowes\\client\\src\\components\\chat\\MessageListCard.js":"62","D:\\SKRIPSI\\gowes\\client\\src\\components\\chat\\ChatListCard.js":"63","D:\\SKRIPSI\\gowes\\client\\src\\components\\chat\\ItemAttachedOnChat.js":"64"},{"size":427,"mtime":1612157259343,"results":"65","hashOfConfig":"66"},{"size":4111,"mtime":1614697320265,"results":"67","hashOfConfig":"66"},{"size":362,"mtime":499162500000,"results":"68","hashOfConfig":"66"},{"size":1463,"mtime":1614602599038,"results":"69","hashOfConfig":"66"},{"size":1278,"mtime":1614690758962,"results":"70","hashOfConfig":"66"},{"size":6895,"mtime":1612790027966,"results":"71","hashOfConfig":"66"},{"size":2499,"mtime":1611655963169,"results":"72","hashOfConfig":"66"},{"size":1696,"mtime":1612449942839,"results":"73","hashOfConfig":"66"},{"size":2297,"mtime":1611655953679,"results":"74","hashOfConfig":"66"},{"size":1599,"mtime":1611829443284,"results":"75","hashOfConfig":"66"},{"size":208,"mtime":1612079807198,"results":"76","hashOfConfig":"66"},{"size":1492,"mtime":1612280407086,"results":"77","hashOfConfig":"66"},{"size":3880,"mtime":1614691727535,"results":"78","hashOfConfig":"66"},{"size":441,"mtime":1614592969163,"results":"79","hashOfConfig":"66"},{"size":436,"mtime":1611655804808,"results":"80","hashOfConfig":"66"},{"size":7579,"mtime":1614735145438,"results":"81","hashOfConfig":"66"},{"size":1354,"mtime":1611766150622,"results":"82","hashOfConfig":"66"},{"size":1048,"mtime":1612443513291,"results":"83","hashOfConfig":"66"},{"size":1492,"mtime":1614824178617,"results":"84","hashOfConfig":"66"},{"size":2703,"mtime":1613997612692,"results":"85","hashOfConfig":"66"},{"size":1109,"mtime":1611902913199,"results":"86","hashOfConfig":"66"},{"size":2067,"mtime":1613724527722,"results":"87","hashOfConfig":"66"},{"size":1510,"mtime":1613439524602,"results":"88","hashOfConfig":"66"},{"size":1107,"mtime":1613392640988,"results":"89","hashOfConfig":"66"},{"size":1344,"mtime":1614003876964,"results":"90","hashOfConfig":"66"},{"size":4988,"mtime":1614693953568,"results":"91","hashOfConfig":"66"},{"size":573,"mtime":1612161104076,"results":"92","hashOfConfig":"66"},{"size":1202,"mtime":1612606427780,"results":"93","hashOfConfig":"66"},{"size":1350,"mtime":1613624051364,"results":"94","hashOfConfig":"66"},{"size":2975,"mtime":1614697320271,"results":"95","hashOfConfig":"66"},{"size":7429,"mtime":1613439030060,"results":"96","hashOfConfig":"66"},{"size":4031,"mtime":1613618727840,"results":"97","hashOfConfig":"66"},{"size":13209,"mtime":1614731000414,"results":"98","hashOfConfig":"66"},{"size":3792,"mtime":1613484930583,"results":"99","hashOfConfig":"66"},{"size":1813,"mtime":1613480664718,"results":"100","hashOfConfig":"66"},{"size":11658,"mtime":1614730569217,"results":"101","hashOfConfig":"66"},{"size":7464,"mtime":1614697320267,"results":"102","hashOfConfig":"66"},{"size":2274,"mtime":1614691727526,"results":"103","hashOfConfig":"66"},{"size":996,"mtime":1614691727527,"results":"104","hashOfConfig":"66"},{"size":1051,"mtime":1612619475663,"results":"105","hashOfConfig":"66"},{"size":925,"mtime":1613988334683,"results":"106","hashOfConfig":"66"},{"size":5534,"mtime":1614690758372,"results":"107","hashOfConfig":"66"},{"size":1802,"mtime":1613989447649,"results":"108","hashOfConfig":"66"},{"size":3308,"mtime":1612620486594,"results":"109","hashOfConfig":"66"},{"size":730,"mtime":1612619440542,"results":"110","hashOfConfig":"66"},{"size":5154,"mtime":1614007485076,"results":"111","hashOfConfig":"66"},{"size":1474,"mtime":1614007582708,"results":"112","hashOfConfig":"66"},{"size":1421,"mtime":1613398552991,"results":"113","hashOfConfig":"66"},{"size":5804,"mtime":1613745708464,"results":"114","hashOfConfig":"66"},{"size":2335,"mtime":1613721690529,"results":"115","hashOfConfig":"66"},{"size":2789,"mtime":1614702681713,"results":"116","hashOfConfig":"66"},{"size":2375,"mtime":1613652009075,"results":"117","hashOfConfig":"66"},{"size":13195,"mtime":1613746212534,"results":"118","hashOfConfig":"66"},{"size":2092,"mtime":1614690758754,"results":"119","hashOfConfig":"66"},{"size":6248,"mtime":1614697320268,"results":"120","hashOfConfig":"66"},{"size":3097,"mtime":1613989575210,"results":"121","hashOfConfig":"66"},{"size":2834,"mtime":1613989346118,"results":"122","hashOfConfig":"66"},{"size":835,"mtime":1613998182056,"results":"123","hashOfConfig":"66"},{"size":2466,"mtime":1613989489316,"results":"124","hashOfConfig":"66"},{"size":4504,"mtime":1614084684779,"results":"125","hashOfConfig":"66"},{"size":3476,"mtime":1614260448559,"results":"126","hashOfConfig":"66"},{"size":4638,"mtime":1614697320270,"results":"127","hashOfConfig":"66"},{"size":2529,"mtime":1614697320269,"results":"128","hashOfConfig":"66"},{"size":3569,"mtime":1614690758884,"results":"129","hashOfConfig":"66"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},"e97are",{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"132"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"132"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"132"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"132"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"132"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"174","messages":"175","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176","usedDeprecatedRules":"132"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"181","usedDeprecatedRules":"132"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184","usedDeprecatedRules":"132"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"191","usedDeprecatedRules":"132"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"200","usedDeprecatedRules":"132"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"203","usedDeprecatedRules":"132"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"208","usedDeprecatedRules":"132"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"211","usedDeprecatedRules":"132"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"214","usedDeprecatedRules":"132"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"217","usedDeprecatedRules":"132"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"220","usedDeprecatedRules":"132"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"223","usedDeprecatedRules":"132"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"228","usedDeprecatedRules":"132"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"231","usedDeprecatedRules":"132"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"234","usedDeprecatedRules":"132"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"237","usedDeprecatedRules":"132"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"240","usedDeprecatedRules":"132"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"243","usedDeprecatedRules":"132"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"246","usedDeprecatedRules":"132"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"249","usedDeprecatedRules":"132"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"252","usedDeprecatedRules":"132"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"255","usedDeprecatedRules":"132"},{"filePath":"256","messages":"257","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"258","usedDeprecatedRules":"132"},{"filePath":"259","messages":"260","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"261","usedDeprecatedRules":"132"},{"filePath":"262","messages":"263","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"264","messages":"265","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"266","usedDeprecatedRules":"132"},{"filePath":"267","messages":"268","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"269","usedDeprecatedRules":"132"},{"filePath":"270","messages":"271","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"272","usedDeprecatedRules":"132"},{"filePath":"273","messages":"274","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"275","usedDeprecatedRules":"132"},{"filePath":"276","messages":"277","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"278","usedDeprecatedRules":"132"},{"filePath":"279","messages":"280","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"281","usedDeprecatedRules":"132"},{"filePath":"282","messages":"283","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"284","usedDeprecatedRules":"132"},{"filePath":"285","messages":"286","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"287","usedDeprecatedRules":"132"},{"filePath":"288","messages":"289","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"290","messages":"291","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"292","usedDeprecatedRules":"132"},{"filePath":"293","messages":"294","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"295","usedDeprecatedRules":"132"},{"filePath":"296","messages":"297","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},"D:\\SKRIPSI\\gowes\\client\\src\\index.js",[],["298","299"],"D:\\SKRIPSI\\gowes\\client\\src\\App.js",[],"D:\\SKRIPSI\\gowes\\client\\src\\reportWebVitals.js",[],"D:\\SKRIPSI\\gowes\\client\\src\\ApolloProvider.js",[],"D:\\SKRIPSI\\gowes\\client\\src\\pages\\Home.js",["300","301"],"import React, { useContext } from 'react';\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport { Grid, Transition } from 'semantic-ui-react';\r\nimport gql from 'graphql-tag'\r\n\r\nimport { AuthContext } from '../context/auth';\r\nimport ShopCard from '../components/ShopCard';\r\nimport FilterBar from '../components/FilterBar';\r\nimport { FETCH_ITEMS_QUERY } from '../util/graphql';\r\n\r\nfunction Home() {\r\n  const { user } = useContext(AuthContext);\r\n  const { loading, data, refetch } = useQuery(FETCH_ITEMS_QUERY)\r\n  const { getItems: items } = data ? data : []\r\n\r\n  const { dataCities } = useQuery(FETCH_CITIES_QUERY,)\r\n  const { getCities: cities } = dataCities ? dataCities : []\r\n\r\n  console.log(cities)\r\n\r\n\r\n  console.log(items)\r\n  return (\r\n    <Grid stackable columns={6}>\r\n      <Grid.Row className=\"page-title\">\r\n        <FilterBar></FilterBar>\r\n      </Grid.Row>\r\n      <Grid.Row>\r\n        {!loading ? (\r\n          <>\r\n            <Transition.Group duration={1000}>\r\n              {items &&\r\n                items.map((item) => (\r\n                  <Grid.Column key={item.id} style={{ marginBottom: 20 }}>\r\n                    <ShopCard item={item} />\r\n                  </Grid.Column>\r\n                ))}\r\n            </Transition.Group>\r\n          </>\r\n        ) : (\r\n            <h1>Loading posts..</h1>\r\n          )}\r\n      </Grid.Row>\r\n    </Grid>\r\n  );\r\n}\r\n\r\nconst FETCH_CITIES_QUERY = gql`\r\n    {\r\n        getCities{\r\n            city_id\r\n            province_id\r\n            province\r\n            type\r\n            city_name\r\n            postal_code\r\n        }\r\n    }\r\n`;\r\n\r\n\r\nexport default Home;","D:\\SKRIPSI\\gowes\\client\\src\\pages\\SinglePost.js",[],"D:\\SKRIPSI\\gowes\\client\\src\\components\\PostForm.js",[],"D:\\SKRIPSI\\gowes\\client\\src\\components\\PostCard.js",["302"],"import React, { useContext } from 'react';\r\nimport { Button, Card, Icon, Label, Image, Popup } from 'semantic-ui-react';\r\nimport { Link } from 'react-router-dom';\r\nimport moment from 'moment';\r\n\r\nimport { AuthContext } from '../context/auth';\r\nimport LikeButton from './LikeButton';\r\nimport DeleteButton from './DeleteButton';\r\nimport MyPopup from './MyPopup';\r\n\r\n\r\nfunction PostCard({\r\n  post: { body, createdAt, id, username, likeCount, commentCount, likes }}) {\r\n  const { user } = useContext(AuthContext);\r\n\r\n  return (\r\n    <Card fluid style={{boxShadow: '0px 3px 5px rgba(0, 0, 0, 0.2)'}}>\r\n      <Card.Content>\r\n        <Image\r\n          floated=\"right\"\r\n          size=\"mini\"\r\n          src=\"https://react.semantic-ui.com/images/avatar/large/molly.png\"\r\n        />\r\n        <Card.Header>{username}</Card.Header>\r\n        <Card.Meta as={Link} to={`/posts/${id}`}>\r\n          {moment(createdAt).fromNow(true)}\r\n        </Card.Meta>\r\n        <Card.Description>{body}</Card.Description>\r\n      </Card.Content>\r\n      <Card.Content extra>\r\n        <LikeButton user={user} post={{ id, likes, likeCount }} />\r\n        <Button onClick={()=>console.log(likes)}>test</Button>\r\n\r\n        <MyPopup content=\"Comment On Post\">\r\n          <Button labelPosition=\"right\" as={Link} to={`/posts/${id}`}>\r\n            <Button color=\"blue\" basic>\r\n              <Icon name=\"comments\" />\r\n            </Button>\r\n            <Label basic color=\"blue\" pointing=\"left\">\r\n              {commentCount}\r\n            </Label>\r\n          </Button>\r\n        </MyPopup>\r\n        {user && user.username === username && <DeleteButton postId={id} />}\r\n      </Card.Content>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default PostCard;","D:\\SKRIPSI\\gowes\\client\\src\\components\\DeleteButton.js",["303"],"import React, { useState } from \"react\";\r\nimport { useMutation } from '@apollo/react-hooks';\r\nimport gql from 'graphql-tag'\r\nimport { Icon, Button, Confirm, Popup } from 'semantic-ui-react'\r\n\r\nimport { FETCH_POSTS_QUERY } from '../util/graphql';\r\nimport MyPopup from './MyPopup';\r\n\r\nfunction DeleteButton({ postId, commentId, callback }) {\r\n\r\n    const [confirmOpen, setConfirmOpen] = useState(false)\r\n\r\n    const mutation = commentId ? DELETE_COMMENT_MUTATION : DELETE_POST_MUTATION\r\n\r\n    const [deletePostOrMutation] = useMutation(mutation, {\r\n        update(proxy, result) {\r\n            setConfirmOpen(false)\r\n            // TODO: remove post cache\r\n\r\n            if (!commentId) {\r\n                const data = proxy.readQuery({\r\n                    query: FETCH_POSTS_QUERY\r\n                })\r\n\r\n                proxy.writeQuery({\r\n                    query: FETCH_POSTS_QUERY,\r\n                    data: {\r\n                        getPosts: data.getPosts.filter(p => p.id !== postId)\r\n                    }\r\n                })\r\n            }\r\n\r\n\r\n\r\n            if (callback) callback()\r\n        },\r\n        variables: { postId, commentId }\r\n    })\r\n\r\n    return (\r\n        <>\r\n            <MyPopup content={commentId ? \"Delete Comment\" : \"Delete Post\"}>\r\n                <Button\r\n                    as=\"div\"\r\n                    color=\"red\"\r\n                    floated=\"right\"\r\n                    onClick={() => setConfirmOpen(true)}\r\n                >\r\n                    <Icon name=\"trash\" style={{ margin: 0 }} />\r\n                </Button>\r\n            </MyPopup>\r\n\r\n            <Confirm\r\n                open={confirmOpen}\r\n                onCancel={() => setConfirmOpen(false)}\r\n                onConfirm={deletePostOrMutation}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nconst DELETE_POST_MUTATION = gql`\r\n    mutation deletePost($postId:ID!){\r\n        deletePost(postId: $postId)\r\n    }\r\n`\r\n\r\nconst DELETE_COMMENT_MUTATION = gql`\r\n    mutation deleteComment($postId:ID!, $commentId:ID!){\r\n        deleteComment(postId: $postId, commentId: $commentId){\r\n            id\r\n            comments{\r\n                id\r\n                username\r\n                createdAt\r\n                body\r\n            }\r\n            commentCount\r\n        }\r\n    }\r\n`\r\n\r\nexport default DeleteButton","D:\\SKRIPSI\\gowes\\client\\src\\components\\LikeButton.js",["304"],"import React, { useEffect, useState } from \"react\";\r\nimport { Link } from 'react-router-dom'\r\nimport { useMutation } from '@apollo/react-hooks';\r\nimport gql from 'graphql-tag'\r\nimport { Icon, Label, Button, Popup } from 'semantic-ui-react'\r\n\r\nimport MyPopup from './MyPopup';\r\n\r\nfunction LikeButton({ user, post: { id, likeCount, likes } }) {\r\n  const [liked, setLiked] = useState(false)\r\n  useEffect(() => {\r\n    if (user && likes.find(like => like.username === user.username)) {\r\n      setLiked(true)\r\n    } else {\r\n      setLiked(false)\r\n    }\r\n  }, [user, likes])\r\n\r\n  const [likePost] = useMutation(LIKE_POST_MUTATION, {\r\n    variables: { postId: id }\r\n  })\r\n\r\n  const likeButton = user ? (\r\n    liked ? (\r\n      <Button color=\"teal\">\r\n        <Icon name=\"heart\" />\r\n      </Button>\r\n    ) : (\r\n        <Button color=\"teal\" basic>\r\n          <Icon name=\"heart\" />\r\n        </Button>\r\n      )\r\n  ) : (\r\n      <Button as={Link} to=\"/login\" color=\"teal\" basic>\r\n        <Icon name=\"heart\" />\r\n      </Button>\r\n    );\r\n  return (\r\n    <>\r\n      <MyPopup content={liked ? 'Unlike' : 'Like'}>\r\n        <Button as='div' labelPosition='right' onClick={likePost}>\r\n          {likeButton}\r\n          <Label basic color='teal' pointing='left'>\r\n            {likeCount}\r\n          </Label>\r\n        </Button>\r\n      </MyPopup>\r\n    </>\r\n\r\n  )\r\n}\r\n\r\nconst LIKE_POST_MUTATION = gql`\r\n    mutation likePost($postId:ID!){\r\n        likePost(postId: $postId){\r\n            id\r\n            likes{\r\n                id username\r\n            }\r\n            likeCount\r\n        }\r\n    }\r\n`\r\n\r\nexport default LikeButton","D:\\SKRIPSI\\gowes\\client\\src\\components\\MyPopup.js",[],"D:\\SKRIPSI\\gowes\\client\\src\\context\\auth.js",[],"D:\\SKRIPSI\\gowes\\client\\src\\util\\graphql.js",[],"D:\\SKRIPSI\\gowes\\client\\src\\util\\hooks.js",[],"D:\\SKRIPSI\\gowes\\client\\src\\util\\AuthRoute.js",[],"D:\\SKRIPSI\\gowes\\client\\src\\components\\NavBar.js",["305","306"],"import React, { useContext, useState } from 'react'\r\nimport { Menu, Dropdown, Button, Segment, Image, Icon, Input } from 'semantic-ui-react'\r\nimport { Link } from 'react-router-dom'\r\nimport { IoMdBicycle } from 'react-icons/io';\r\n\r\n\r\nimport { AuthContext } from '../context/auth'\r\nimport MyPopup from './MyPopup';\r\n\r\n\r\nfunction NavBar(props) {\r\n\r\n    const { user, logout } = useContext(AuthContext)\r\n    const pathname = window.location.pathname\r\n    const path = pathname === '/' ? 'profile' : pathname.substr(1)\r\n\r\n    const [activeItem, setActiveItem] = useState(path)\r\n\r\n    const handleItemClick = (e, { name }) => {\r\n        setActiveItem(name)\r\n        if (name === 'cart') {\r\n            window.location.href = '/cart'\r\n        } else if (name === 'bookmark') {\r\n            window.location.href = '/wishList'\r\n        } else if (name === 'login') {\r\n            window.location.href = '/login'\r\n        } else if (name === 'home' || 'shop') {\r\n            window.location.href = '/'\r\n        }\r\n    }\r\n    const handleItemHover = () => {\r\n        // handleItemClick()\r\n        props.onDimmed()\r\n    }\r\n\r\n    const navBar = user ? (\r\n\r\n        // logged in navbar\r\n        <Segment>\r\n            <div className=\"ui huge top inverted fixed menu \" style={{ height: 80, zIndex: 1100 }}>\r\n                <Menu size=\"large\" fluid inverted secondary>\r\n                    <Menu.Item></Menu.Item>\r\n                    <Menu.Item\r\n                        active={activeItem === 'home'}\r\n                        // onClick={handleItemClick}\r\n                        as={Link}\r\n                        to=\"/\"\r\n                    >\r\n                        <IoMdBicycle color='rgb(206, 206, 206)' style={{ fontSize: 28, marginRight: 5 }}></IoMdBicycle>\r\n                        <div className=\"logo\">Gowes</div>\r\n                    </Menu.Item>\r\n                    {/* <Menu.Item>\r\n                        <Input\r\n                            icon={{ name: 'search', circular: true, link: true }}\r\n                            placeholder='Search...'\r\n                            style={{width:500}}\r\n                        />\r\n                    </Menu.Item> */}\r\n                    {/* <Menu.Item\r\n                        // onMouseEnter={handleItemHover}\r\n                        // onMouseLeave={handleItemHover}\r\n                        name='shop'\r\n                        active={activeItem === 'shop'}\r\n                        // onClick={handleItemClick}\r\n                        as={Link}\r\n                        to=\"/\"\r\n                    /> */}\r\n                    {/* <Menu.Item\r\n                        name='event'\r\n                        active={activeItem === 'event'}\r\n                        // onClick={handleItemClick}\r\n                        as={Link}\r\n                        to=\"/event\"\r\n                    /> */}\r\n\r\n\r\n                    <Menu.Menu position='right'>\r\n                        <Menu.Item\r\n                            name='bookmark'\r\n                            active={activeItem === 'bookmark'}\r\n                            // onClick={handleItemClick}\r\n                            as={Link}\r\n                            to=\"/wishList\"\r\n                        >\r\n                            <MyPopup content=\"Wishlist\">\r\n                                <Icon name=\"heart\" centered=\"true\"></Icon>\r\n                            </MyPopup>\r\n                        </Menu.Item>\r\n\r\n                        <Menu.Item\r\n                            name='cart'\r\n                            active={activeItem === 'cart'}\r\n                            // onClick={handleItemClick}\r\n                            as={Link}\r\n                            to=\"/cart\"\r\n                        >\r\n                            <MyPopup content=\"Cart\">\r\n                                <Icon name=\"cart\" centered=\"true\"></Icon>\r\n                            </MyPopup>\r\n                        </Menu.Item>\r\n\r\n                        <Menu.Item\r\n                        // onMouseEnter={handleItemHover}\r\n                        // onMouseLeave={handleItemHover}\r\n                        >\r\n                            <Image circular src=\"https://react.semantic-ui.com/images/avatar/small/stevie.jpg\" style={{ height: 30, marginRight: 0 }} verticalAlign='middle' />\r\n                            <Dropdown item text={user.name} style={{ marginLeft: 0 }}>\r\n                                <Dropdown.Menu>\r\n                                    <Dropdown.Item as={Link} to=\"/profile/profileCard\"><Icon name=\"user\" />My Profile</Dropdown.Item>\r\n                                    <Dropdown.Item as={Link} to=\"/myStore/myStoreDetailsCard\"><Icon name=\"bicycle\" />My Store</Dropdown.Item>\r\n                                    {/* <Dropdown.Item>Transaksi</Dropdown.Item> */}\r\n                                    <Dropdown.Item as={Link} to=\"/\" name='logout' onClick={logout}><Icon name=\"sign out\" color=\"red\" /> Logout</Dropdown.Item>\r\n                                </Dropdown.Menu>\r\n                            </Dropdown>\r\n                        </Menu.Item>\r\n\r\n                        <Menu.Item></Menu.Item>\r\n                    </Menu.Menu>\r\n                </Menu>\r\n            </div>\r\n        </Segment>\r\n\r\n    ) : (\r\n            // guest navbar\r\n            <Segment inverted>\r\n                <div className=\"ui huge top inverted fixed menu \" style={{ height: 80, zIndex: 1100 }}>\r\n                    <Menu fluid inverted secondary size='large'>\r\n                        <Menu.Item></Menu.Item>\r\n                        <Menu.Item\r\n                            active={activeItem === ''}\r\n                            onClick={handleItemClick}\r\n                            as={Link}\r\n                            to=\"/\"\r\n                        >\r\n                            <IoMdBicycle color='rgb(206, 206, 206)' style={{ fontSize: 28, marginRight: 5 }}></IoMdBicycle>\r\n                            <div className=\"logo\">Gowes</div>\r\n                        </Menu.Item>\r\n\r\n                        {/* <Menu.Item\r\n                            name='shop'\r\n                            active={activeItem === 'shop'}\r\n                            onClick={handleItemClick}\r\n                            as={Link}\r\n                            to=\"/\"\r\n                        />\r\n                        <Menu.Item\r\n                            name='event'\r\n                            active={activeItem === 'event'}\r\n                            onClick={handleItemClick}\r\n                            as={Link}\r\n                            to=\"/event\"\r\n                        /> */}\r\n\r\n\r\n                        <Menu.Menu position='right'>\r\n                            <Menu.Item>\r\n                                <Button\r\n                                    color='teal'\r\n                                    inverted\r\n                                    name='login'\r\n                                    active={activeItem === 'login'}\r\n                                    onClick={handleItemClick}\r\n                                    as={Link}\r\n                                    to=\"/login\"\r\n                                    style={{ marginRight: 10 }}\r\n                                >\r\n                                    Sign In\r\n                            </Button>\r\n                            </Menu.Item>\r\n                            <Menu.Item></Menu.Item>\r\n                        </Menu.Menu>\r\n                    </Menu>\r\n                </div>\r\n            </Segment>\r\n\r\n        )\r\n    return navBar\r\n}\r\n\r\nexport default NavBar","D:\\SKRIPSI\\gowes\\client\\src\\pages\\Event.js",[],"D:\\SKRIPSI\\gowes\\client\\src\\components\\Footer.js",[],"D:\\SKRIPSI\\gowes\\client\\src\\components\\ShopCard.js",[],"D:\\SKRIPSI\\gowes\\client\\src\\components\\BookmarkButton.js",["307"],"import React, { useEffect, useState } from \"react\";\r\nimport { Link } from 'react-router-dom'\r\nimport { useMutation } from '@apollo/react-hooks';\r\nimport gql from 'graphql-tag'\r\nimport { Icon, Button } from 'semantic-ui-react'\r\n\r\nimport MyPopup from './MyPopup';\r\nimport { FETCH_BOOKMARKS_QUERY } from '../util/graphql';\r\n\r\n\r\nfunction BookmarkButton({ user, item: { id, bookmarkedBy } }) {\r\n    const [bookmarked, setBookmarked] = useState(false)\r\n\r\n    useEffect(() => {\r\n        if (user.user && bookmarkedBy.find(bookmark => bookmark.userId === user.user.id)) {\r\n            setBookmarked(true)\r\n        } else {\r\n            setBookmarked(false)\r\n        }\r\n    }, [user, bookmarkedBy])\r\n\r\n    const [errors, setErrors] = useState({})\r\n\r\n    const [bookmarkPost] = useMutation(BOOKMARK_ITEM_MUTATION, {\r\n        variables: { itemId: id },\r\n        update(proxy, result) {\r\n            const data = proxy.readQuery({\r\n                query: FETCH_BOOKMARKS_QUERY\r\n            })\r\n\r\n            if (!bookmarked) {\r\n                proxy.writeQuery({\r\n                    query: FETCH_BOOKMARKS_QUERY,\r\n                    data: {\r\n                        getBookmarks: [result.data.bookmarkItem, ...data.getBookmarks]\r\n                    }\r\n                })\r\n            } else {\r\n                proxy.writeQuery({\r\n                    query: FETCH_BOOKMARKS_QUERY,\r\n                    data: {\r\n                        getBookmarks: data.getBookmarks.filter(item => item.id !== id)\r\n                    },\r\n                })\r\n            }\r\n\r\n\r\n\r\n        },\r\n        onError(err) {\r\n            setErrors(err.graphQLErrors[0].extensions.exception.errors);\r\n        },\r\n    })\r\n\r\n    const bookmarkButton = user.user ? (\r\n        bookmarked ? (\r\n            <Button fluid color=\"teal\">\r\n                <Icon name=\"heart\" />\r\n            </Button>\r\n        ) : (\r\n                <Button fluid color=\"teal\" basic>\r\n                    <Icon name=\"heart\" />\r\n                </Button>\r\n            )\r\n    ) : (\r\n            <Button fluid as={Link} to=\"/login\" color=\"teal\" basic>\r\n                <Icon name=\"heart\" />\r\n            </Button>\r\n        );\r\n    return (\r\n\r\n        <MyPopup content={bookmarked ? 'Remove Wishlist' : 'Add Wishlist'}>\r\n            <div as='div' onClick={user ? bookmarkPost : ''}>\r\n                {bookmarkButton}\r\n            </div>\r\n        </MyPopup>\r\n\r\n    )\r\n}\r\n\r\nconst BOOKMARK_ITEM_MUTATION = gql`\r\n    mutation bookmarkItem($itemId:ID!){\r\n        bookmarkItem(itemId: $itemId){\r\n            id\r\n            bookmarkedBy{\r\n                id\r\n                userId\r\n                createdAt\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nexport default BookmarkButton","D:\\SKRIPSI\\gowes\\client\\src\\components\\FilterBar.js",[],"D:\\SKRIPSI\\gowes\\client\\src\\pages\\Cart.js",["308","309","310"],"import React from 'react';\r\nimport { Grid, Ref, Message, Transition } from 'semantic-ui-react';\r\nimport { useQuery } from '@apollo/react-hooks';\r\n\r\nimport CartCard from '../components/CartCard';\r\nimport ItemSummaryCard from '../components/ItemSummaryCard';\r\nimport { FETCH_USER_CART_QUERY } from '../util/graphql';\r\n\r\n\r\nfunction Cart() {\r\n  const contextRef = React.createRef();\r\n\r\n  const { loading, data, refetch } = useQuery(FETCH_USER_CART_QUERY)\r\n  let { getUserCartItems: cartItems } = data ? data : []\r\n\r\n  console.log(cartItems)\r\n\r\n  Object.size = function (obj) {\r\n    var size = 0,\r\n      key;\r\n    for (key in obj) {\r\n      if (obj.hasOwnProperty(key)) size++;\r\n    }\r\n    return size;\r\n  };\r\n\r\n  var size = Object.size(cartItems)\r\n\r\n  let cartMarkup = (\r\n    <>\r\n      <br></br>\r\n      <Grid.Column width={16}><h1>My Cart</h1></Grid.Column>\r\n      <>\r\n        <Message\r\n          error\r\n          icon='cart'\r\n          header='You dont have items in cart'\r\n          content='add items to cart'\r\n          style={{ marginBottom: 202 }}\r\n        />\r\n      </>\r\n    </>\r\n  )\r\n  if (!loading) {\r\n    if (size >0) {\r\n      let group = cartItems.reduce((r, a) => {\r\n        r[a.item.user.id] = [...r[a.item.user.id] || [], a];\r\n        return r;\r\n      }, {});\r\n      console.log(group)\r\n\r\n      Object.keys(group).map(function (key, index) {\r\n        console.log(group[key])\r\n      })\r\n      cartMarkup = (\r\n        <Ref innerRef={contextRef}>\r\n          <Grid stackable>\r\n            <Grid.Column width={16}></Grid.Column>\r\n            <Grid.Column width={12} >\r\n              {group &&\r\n                Object.keys(group).map((key, index) =>\r\n                (\r\n                  <CartCard cartItem={group[key]}></CartCard>\r\n                )\r\n                )\r\n              }\r\n            </Grid.Column>\r\n            <Grid.Column width={4}>\r\n              <ItemSummaryCard contextRef={contextRef}  ></ItemSummaryCard>\r\n            </Grid.Column>\r\n          </Grid>\r\n        </Ref>\r\n      )\r\n    }\r\n\r\n\r\n  }\r\n  return cartMarkup\r\n}\r\n\r\nexport default Cart;","D:\\SKRIPSI\\gowes\\client\\src\\pages\\Bookmark.js",["311","312"],"import React, { useContext } from 'react';\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport { Grid, Transition, Message } from 'semantic-ui-react';\r\n\r\nimport { AuthContext } from '../context/auth';\r\nimport ShopCard from '../components/ShopCard';\r\nimport { FETCH_BOOKMARKS_QUERY } from '../util/graphql';\r\n\r\nfunction Home() {\r\n  const { user } = useContext(AuthContext);\r\n  const { loading, data } = useQuery(FETCH_BOOKMARKS_QUERY)\r\n  const { getBookmarks: bookmarks } = data ? data : []\r\n\r\n  console.log(bookmarks)\r\n  return (\r\n    <Grid stackable columns={6}>\r\n      <Grid.Column width={16}></Grid.Column>\r\n      <Grid.Column width={16}><h1>My Wishlist</h1></Grid.Column>\r\n      <Grid.Row>\r\n        {loading || bookmarks==0? (\r\n          <>\r\n          <Message\r\n            error\r\n            icon='heart'\r\n            header='You dont have any wishlisted items'\r\n            content='add wishlist if want to mark the item'\r\n            style={{marginBottom:109}}\r\n          />\r\n          <Grid></Grid>\r\n          </>\r\n        ) : (\r\n            <>\r\n              <Transition.Group duration={700}>\r\n                {bookmarks &&\r\n                  bookmarks.map((bookmark) => (\r\n                    <Grid.Column key={bookmark.id} style={{ marginBottom: 20 }}>\r\n                      <ShopCard item={bookmark} />\r\n                    </Grid.Column>\r\n                  ))}\r\n              </Transition.Group>\r\n            </>\r\n          )}\r\n      </Grid.Row>\r\n    </Grid>\r\n  );\r\n}\r\n\r\nexport default Home;","D:\\SKRIPSI\\gowes\\client\\src\\pages\\Profile.js",[],"D:\\SKRIPSI\\gowes\\client\\src\\components\\SidebarProfile.js",[],"D:\\SKRIPSI\\gowes\\client\\src\\components\\ProfileCard.js",["313"],"import React, { useContext, useState } from \"react\";\r\nimport {\r\n  Card,\r\n  Image,\r\n  Grid,\r\n  Button,\r\n  Form,\r\n  TextArea,\r\n  Icon,\r\n} from \"semantic-ui-react\";\r\nimport gql from \"graphql-tag\";\r\nimport { useQuery, useMutation } from \"@apollo/react-hooks\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport { AuthContext } from \"../context/auth\";\r\n\r\nfunction ProfileCard(props) {\r\n  const context = useContext(AuthContext);\r\n  console.log(\"userid@profileCard: \", context.user.id);\r\n  const { loading, data } = useQuery(FETCH_USER_QUERY, {\r\n    variables: {\r\n      userId: context.user.id,\r\n    },\r\n  });\r\n  const { getUser: currentUser } = data ? data : [];\r\n\r\n  const [avatar] = useState(\r\n    \"https://react.semantic-ui.com/images/avatar/large/molly.png\"\r\n  );\r\n\r\n  return (\r\n    <>\r\n      {loading ? (\r\n        <h1>Loading posts..</h1>\r\n      ) : (\r\n        <Card\r\n          fluid\r\n          style={{ boxShadow: \"0px 3px 5px rgba(0, 0, 0, 0.2)\" }}\r\n          className={loading ? \"loading\" : \"\"}\r\n        >\r\n          <Card.Content header=\"Profile Details\" />\r\n          <Card.Content>\r\n            <Grid stackable>\r\n              <Grid.Column width={5}>\r\n                <Card centered>\r\n                  <Image\r\n                    src={loading ? avatar : currentUser.buyer.avatar}\r\n                    wrapped\r\n                    ui={false}\r\n                  />\r\n                </Card>\r\n              </Grid.Column>\r\n              <Grid.Column width={11}>\r\n                <Form\r\n                  size=\"small\"\r\n                  noValidate\r\n                  className={loading ? \"loading\" : \"\"}\r\n                >\r\n                  <Form.Input\r\n                    readOnly\r\n                    fluid\r\n                    icon=\"user\"\r\n                    iconPosition=\"left\"\r\n                    placeholder=\"Name\"\r\n                    label=\"Name\"\r\n                    value={currentUser.buyer.name}\r\n                    name=\"name\"\r\n                  />\r\n                  <Form.Input\r\n                    readOnly\r\n                    fluid\r\n                    icon=\"mail\"\r\n                    iconPosition=\"left\"\r\n                    placeholder=\"Email\"\r\n                    label=\"Email\"\r\n                    value={currentUser.email}\r\n                    name=\"email\"\r\n                  />\r\n                  <Form.Input\r\n                    readOnly\r\n                    fluid\r\n                    icon=\"phone\"\r\n                    iconPosition=\"left\"\r\n                    placeholder=\"Phone Number\"\r\n                    label=\"Phone Number\"\r\n                    value={currentUser.email}\r\n                    name=\"phone\"\r\n                  />\r\n                  <Form.Input\r\n                    readOnly\r\n                    fluid\r\n                    icon=\"calendar\"\r\n                    iconPosition=\"left\"\r\n                    placeholder=\"Birth Date\"\r\n                    label=\"Birth Date\"\r\n                    name=\"birthDate\"\r\n                    value={currentUser.buyer.birthDate}\r\n                  />\r\n                  <Form.Input\r\n                    readOnly\r\n                    fluid\r\n                    placeholder=\"City\"\r\n                    label=\"Address\"\r\n                    name=\"city\"\r\n                    value={currentUser.address.cityName}\r\n                  />\r\n                  <Form.Input\r\n                    readOnly\r\n                    fluid\r\n                    placeholder=\"Districts\"\r\n                    name=\"districts\"\r\n                    value={currentUser.address.district}\r\n                  />\r\n                  <Form.Input\r\n                    readOnly\r\n                    fluid\r\n                    placeholder=\"Postal Code\"\r\n                    name=\"postalCode\"\r\n                    value={currentUser.address.postalCode}\r\n                  />\r\n                  <Form.Input\r\n                    readOnly\r\n                    fluid\r\n                    placeholder=\"Address Details\"\r\n                    name=\"addressDetails\"\r\n                    control={TextArea}\r\n                    value={currentUser.address.detail}\r\n                  />\r\n                  <Button\r\n                    floated=\"right\"\r\n                    color=\"teal\"\r\n                    size=\"small\"\r\n                    as={Link}\r\n                    to=\"/editProfileCard\"\r\n                  >\r\n                    <Icon name=\"edit outline\"></Icon>\r\n                    Edit\r\n                  </Button>\r\n                </Form>\r\n              </Grid.Column>\r\n            </Grid>\r\n          </Card.Content>\r\n        </Card>\r\n      )}\r\n    </>\r\n  );\r\n}\r\nconst FETCH_USER_QUERY = gql`\r\n  query getUser($userId: ID!) {\r\n    getUser(userId: $userId) {\r\n      id\r\n      email\r\n      phone\r\n      address {\r\n        cityName\r\n        cityId\r\n        district\r\n        postalCode\r\n        detail\r\n      }\r\n      balance\r\n      buyer {\r\n        name\r\n        birthDate\r\n        avatar\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport default ProfileCard;\r\n","D:\\SKRIPSI\\gowes\\client\\src\\firebase\\index.js",[],"D:\\SKRIPSI\\gowes\\client\\src\\pages\\MyStore.js",[],"D:\\SKRIPSI\\gowes\\client\\src\\components\\SidebarStore.js",[],"D:\\SKRIPSI\\gowes\\client\\src\\pages\\ItemDetail.js",["314","315","316"],"import React, { useContext } from 'react';\r\nimport { FETCH_ITEM_QUERY, FETCH_CART_QUERY } from '../util/graphql';\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport { Grid, Ref, Rail } from 'semantic-ui-react';\r\n\r\n\r\nimport ItemTransactionCard from '../components/ItemTransactionCard'\r\nimport ManageItemSticky from '../components/ManageItemSticky'\r\nimport ItemDetailCard from '../components/ItemDetailCard'\r\nimport ItemImagesCard from '../components/ItemImagesCard'\r\nimport ItemReviewsCard from '../components/ItemReviewsCard'\r\nimport ReviewSummaryCard from '../components/ReviewSummaryCard'\r\nimport { AuthContext } from '../context/auth';\r\n\r\nfunction ItemDetail(props) {\r\n  console.log(props)\r\n  const itemId = props.props.match.params.itemId;\r\n  const context = useContext(AuthContext);\r\n  const contextRef = React.createRef();\r\n  const imageContextRef = React.createRef();\r\n  const { loading, data: itemData, data: reviewData } = useQuery(FETCH_ITEM_QUERY, {\r\n    variables: {\r\n      itemId: itemId\r\n    }\r\n  })\r\n  const { getItem: item } = itemData ? itemData : []\r\n  const { getItemReviews: reviews } = reviewData ? reviewData : []\r\n\r\n  let postMarkup = (<p>Loading item..</p>);\r\n  if (item) {\r\n    postMarkup = (\r\n      <Ref innerRef={contextRef}>\r\n        <Grid>\r\n          <Grid.Column width={12}>\r\n            <Grid.Row style={{ marginBottom: 30 }}>\r\n              <Ref innerRef={imageContextRef}>\r\n                <Grid>\r\n                  <Grid.Column width={6}>\r\n                    <ItemImagesCard contextRef={imageContextRef} images={item.images} />\r\n                  </Grid.Column>\r\n                  <Grid.Column width={10} style={{ paddingTop: 50 }}>\r\n                    <ItemDetailCard item={item} />\r\n                  </Grid.Column>\r\n                </Grid>\r\n              </Ref>\r\n            </Grid.Row>\r\n            <Grid.Row style={{ marginBottom: 30 }}>\r\n              <ReviewSummaryCard />\r\n            </Grid.Row>\r\n            <Grid.Row>\r\n              <ItemReviewsCard reviews={reviews} />\r\n            </Grid.Row>\r\n          </Grid.Column>\r\n          <Grid.Column width={4}>\r\n            {context.user ? (context.user.id !== item.user.id ? (\r\n              <ItemTransactionCard contextRef={contextRef} item={item} onChatVisible={props.onChatVisible}/>\r\n            ) : (\r\n                <ManageItemSticky contextRef={contextRef} item={item} />\r\n              )):(<div></div>)}\r\n          </Grid.Column>\r\n        </Grid>\r\n      </Ref>\r\n    );\r\n  }\r\n  return postMarkup;\r\n}\r\n\r\nexport default ItemDetail;","D:\\SKRIPSI\\gowes\\client\\src\\components\\EditMyStoreDetailsCard.js",["317"],"import React, { useContext, useState } from 'react';\r\nimport { Card, Image, Grid, Button, Form, TextArea, Icon } from 'semantic-ui-react';\r\nimport gql from 'graphql-tag'\r\nimport { useQuery, useMutation } from '@apollo/react-hooks';\r\nimport { storage } from '../firebase';\r\nimport { useForm } from '../util/hooks'\r\nimport { withRouter } from 'react-router-dom';\r\n\r\n\r\nimport { AuthContext } from '../context/auth';\r\n\r\n\r\nfunction EditMyStoreDetailsCard(props) {\r\n\r\n    const context = useContext(AuthContext);\r\n\r\n    const [isSaved, setSave] = useState(false)\r\n\r\n    const [errors, setErrors] = useState({})\r\n\r\n    const { loading, data } = useQuery(FETCH_USER_QUERY, {\r\n        variables: {\r\n            userId: context.user.id\r\n        }\r\n    })\r\n    const { getUser: currentUser } = data ? data : []\r\n\r\n\r\n    const fileInputRef = React.createRef();\r\n    const [avatar, setAvatar] = useState('https://react.semantic-ui.com/images/avatar/large/molly.png');\r\n\r\n    const fileChange = e => {\r\n        const image = e.target.files[0]\r\n        if (image) {\r\n            const uploadTask = storage.ref(`images/${image.name}`).put(image);\r\n            uploadTask.on(\r\n                \"state_changed\",\r\n                snapshot => { },\r\n                error => { console.log(error) },\r\n                () => {\r\n                    storage\r\n                        .ref(\"images\")\r\n                        .child(image.name)\r\n                        .getDownloadURL()\r\n                        .then(url => {\r\n                            setAvatar(url);\r\n                            console.log(url);\r\n                        });\r\n                });\r\n        }\r\n    };\r\n    console.log(\"File chosen --->\", avatar);\r\n\r\n    let userObj = {\r\n        avatar: '',\r\n        username: currentUser.seller.username,\r\n        description: currentUser.seller.description\r\n    }\r\n\r\n    let { onChange, onSubmit, values } = useForm(updateSellerProfile, userObj)\r\n\r\n    const [sellerProfileUpdate, { }] = useMutation(UPDATE_SELLER_PROFILE_MUTATION, {\r\n        update(_, { data: { updateSellerProfile: sellerData } }) {\r\n            sellerData.username = sellerData.seller.username;\r\n            context.login(sellerData)\r\n            setSave(true)\r\n            setErrors({})\r\n            props.history.push('/myStore/myStoreDetailsCard')\r\n        },\r\n        onError(err) {\r\n            setErrors(err.graphQLErrors[0].extensions.exception.errors);\r\n            setSave(true)\r\n        },\r\n\r\n        variables: values\r\n    })\r\n\r\n    const showMessage = () => {\r\n        if (isSaved) {\r\n            console.log(errors)\r\n            if (Object.keys(errors).length > 0) {\r\n                return (<div className='ui error message'>\r\n                    <ul className=\"list\">\r\n                        {Object.values(errors).map(value => (<li key={value}>{value}</li>))}\r\n                    </ul>\r\n                </div>)\r\n            } else {\r\n                return (\r\n                    <div className='ui positive message'>\r\n                        <ul className=\"list\">\r\n                            Updated\r\n                        </ul>\r\n                    </div>\r\n                )\r\n            }\r\n\r\n        } else {\r\n            return <div></div>\r\n        }\r\n    }\r\n\r\n    function updateSellerProfile() {\r\n        values.avatar = avatar\r\n        sellerProfileUpdate()\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            {loading ? (\r\n                <h1>Loading posts..</h1>\r\n            ) : (\r\n\r\n                    <Card fluid style={{ boxShadow: '0px 3px 5px rgba(0, 0, 0, 0.2)' }}>\r\n                        <Card.Content header='My Store Detail Form' />\r\n                        <Card.Content>\r\n                            <Grid stackable >\r\n                                <Grid.Column width={5}>\r\n                                    <Card centered>\r\n                                        <Image src={loading ? avatar : currentUser.seller.avatar} wrapped ui={false} />\r\n                                        <Card.Content extra>\r\n                                            <Form>\r\n                                                <Button fluid onClick={() => fileInputRef.current.click()}>Change Avatar</Button>\r\n                                                <input ref={fileInputRef} type=\"file\" hidden onChange={fileChange} />\r\n                                            </Form>\r\n                                        </Card.Content>\r\n                                    </Card>\r\n                                </Grid.Column>\r\n                                <Grid.Column width={11}>\r\n                                    <Form size='small' onSubmit={onSubmit} noValidate className={loading ? \"loading\" : \"\"}>\r\n                                        <Form.Input\r\n                                            fluid\r\n                                            placeholder='Store Name'\r\n                                            label='Store Name'\r\n                                            value={values.username}\r\n                                            name=\"username\"\r\n                                            onChange={onChange}\r\n                                            error={errors.username ? true : false}\r\n                                        />\r\n                                        <Form.Input\r\n                                            fluid\r\n                                            iconPosition='left'\r\n                                            placeholder='Store Description'\r\n                                            label='Description'\r\n                                            control={TextArea}\r\n                                            value={values.description}\r\n                                            name=\"description\"\r\n                                            onChange={onChange}\r\n                                        />\r\n                                        <Button color='teal' size='small' floated=\"right\">\r\n                                            <Icon name=\"check circle outline\"></Icon>\r\n                                            Save\r\n                                        </Button>\r\n                                    </Form>\r\n                                    {showMessage()}\r\n                                </Grid.Column>\r\n                            </Grid>\r\n                        </Card.Content>\r\n                    </Card>\r\n                )}\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nconst FETCH_USER_QUERY = gql`\r\n    query getUser($userId: ID!) {\r\n        getUser(userId: $userId) {\r\n            id\r\n            email\r\n            seller{\r\n            id\r\n            username\r\n            avatar\r\n            description\r\n            description\r\n            createdAt\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nconst UPDATE_SELLER_PROFILE_MUTATION = gql`\r\n    mutation updateSellerProfile(\r\n        $username: String!\r\n        $avatar: String!\r\n        $description: String!\r\n    ){\r\n        updateSellerProfile(\r\n            sellerProfileInput:{\r\n            username: $username\r\n            avatar: $avatar\r\n            description: $description\r\n            }\r\n        ) {\r\n            id\r\n            token\r\n            seller{\r\n                id\r\n                username\r\n                avatar\r\n                description\r\n                createdAt\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nexport default withRouter(EditMyStoreDetailsCard)","D:\\SKRIPSI\\gowes\\client\\src\\components\\MyStoreDetailsCard.js",[],"D:\\SKRIPSI\\gowes\\client\\src\\components\\EditProfileCard.js",["318","319","320"],"import React, { useContext, useState } from \"react\";\r\nimport { Card, Image, Grid, Button, Form, TextArea } from \"semantic-ui-react\";\r\nimport gql from \"graphql-tag\";\r\nimport { useQuery, useMutation } from \"@apollo/react-hooks\";\r\nimport { storage } from \"../firebase\";\r\nimport { useForm } from \"../util/hooks\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nimport { AuthContext } from \"../context/auth\";\r\n\r\nfunction EditProfileCard(props) {\r\n  const context = useContext(AuthContext);\r\n  const [errors, setErrors] = useState({});\r\n\r\n  // const [kota, setKota] = useState({});\r\n  const [kotaName, setKotaName] = useState(\"\");\r\n  const [kotaId, setKotaId] = useState(\"\");\r\n  const [isKotaSet, setIsKota] = useState(false);\r\n\r\n  const [isSaved, setSave] = useState(false);\r\n\r\n  const { loading, data: userData, data: cityData } = useQuery(\r\n    FETCH_USER_QUERY,\r\n    {\r\n      variables: {\r\n        userId: context.user.id,\r\n      },\r\n    }\r\n  );\r\n  const { getUser: currentUser } = userData ? userData : [];\r\n  const { getCities: cities } = cityData ? cityData : [];\r\n\r\n  // console.log(cities)\r\n\r\n  if (!loading && !isKotaSet) {\r\n    setKotaName(currentUser.address.cityName)\r\n    setKotaId(currentUser.address.cityId)\r\n    // setKota({\r\n    //   cityName: currentUser.address.cityName,\r\n    //   cityId: currentUser.address.cityId\r\n    // })\r\n    setIsKota(true)\r\n  }\r\n\r\n  const options = [\r\n    { key: \"bandung\", text: \"Bandung\", value: \"bandung\" },\r\n    { key: \"jakarta\", text: \"Jakarta\", value: \"jakarta\" },\r\n    { key: \"Malang\", text: \"Malang\", value: \"Malang\" },\r\n  ];\r\n\r\n  const handleChange = (event) => {\r\n\r\n    // let cityValue = event.target.value.split(\"-\")\r\n    // setKota({\r\n    //   cityName: cityValue[0],\r\n    //   cityId: cityValue[1]\r\n    // })\r\n    setKotaName(event.target.value.split(\"-\")[0]);\r\n    setKotaId(event.target.value.split(\"-\")[1]);\r\n  };\r\n\r\n  let userObj = {\r\n    avatar: \"\",\r\n    name: \"\",\r\n    email: \"\",\r\n    phone: \"\",\r\n    birthDate: \"\",\r\n    // city: \"\",\r\n  };\r\n\r\n  if (currentUser) {\r\n    userObj = {\r\n      // avatar: \"\",\r\n      name: currentUser.buyer.name,\r\n      email: currentUser.email,\r\n      phone: currentUser.phone,\r\n      birthDate: currentUser.buyer.birthDate,\r\n      // cityName: currentUser.address.cityName,\r\n      district: currentUser.address.district,\r\n      postalCode: currentUser.address.postalCode,\r\n      detail: currentUser.address.detail,\r\n      // city: kota,\r\n    };\r\n  }\r\n\r\n  let { onChange, onSubmit, values } = useForm(updateUserProfile, userObj);\r\n\r\n  console.log(values.cityId);\r\n\r\n  const fileInputRef = React.createRef();\r\n  const [avatar, setAvatar] = useState(\r\n    \"https://react.semantic-ui.com/images/avatar/large/molly.png\"\r\n  );\r\n\r\n  const fileChange = (e) => {\r\n    const image = e.target.files[0];\r\n    if (image) {\r\n      const uploadTask = storage.ref(`images/${image.name}`).put(image);\r\n      uploadTask.on(\r\n        \"state_changed\",\r\n        (snapshot) => { },\r\n        (error) => {\r\n          console.log(error);\r\n        },\r\n        () => {\r\n          storage\r\n            .ref(\"images\")\r\n            .child(image.name)\r\n            .getDownloadURL()\r\n            .then((url) => {\r\n              setAvatar(url);\r\n              console.log(url);\r\n            });\r\n        }\r\n      );\r\n    }\r\n  };\r\n  // console.log(\"File chosen --->\", avatar);\r\n\r\n  const [updateProfile, { }] = useMutation(UPDATE_PROFILE_MUTATION, {\r\n    update(_, { data: { updateUserProfile: userData } }) {\r\n      userData.name = userData.buyer.name;\r\n      context.login(userData);\r\n      setSave(true);\r\n      setErrors({});\r\n      props.history.push(\"/profile/profileCard\");\r\n    },\r\n    onError(err) {\r\n      setErrors(err.graphQLErrors[0].extensions.exception.errors);\r\n      setSave(true);\r\n    },\r\n    variables: {\r\n      ...values,\r\n      cityName: kotaName,\r\n      cityId: kotaId,\r\n      avatar: avatar\r\n    }\r\n  });\r\n\r\n  console.log(values)\r\n\r\n  function updateUserProfile() {\r\n    // values.avatar = avatar;\r\n    // let cityValue = kotaName.split(\"-\")\r\n    // setKotaName(cityValue[0])\r\n    // setKotaId(cityValue[1])\r\n    updateProfile();\r\n  }\r\n\r\n  const showMessage = () => {\r\n    if (isSaved) {\r\n      console.log(errors);\r\n      if (Object.keys(errors).length > 0) {\r\n        return (\r\n          <div className=\"ui error message\">\r\n            <ul className=\"list\">\r\n              {Object.values(errors).map((value) => (\r\n                <li key={value}>{value}</li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n        );\r\n      } else {\r\n        return (\r\n          <div className=\"ui positive message\">\r\n            <ul className=\"list\">Updated</ul>\r\n          </div>\r\n        );\r\n      }\r\n    } else {\r\n      return <div></div>;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {loading ? (\r\n        <h1>Loading posts..</h1>\r\n      ) : (\r\n          <Card\r\n            fluid\r\n            style={{ boxShadow: \"0px 3px 5px rgba(0, 0, 0, 0.2)\" }}\r\n            className={loading ? \"loading\" : \"\"}\r\n          >\r\n            <Card.Content header=\"Profile Details\" />\r\n            <Card.Content>\r\n              <Grid stackable>\r\n                <Grid.Column width={5}>\r\n                  <Card centered>\r\n                    <Image\r\n                      src={loading ? avatar : currentUser.buyer.avatar}\r\n                      wrapped\r\n                      ui={false}\r\n                    />\r\n                    <Card.Content extra>\r\n                      <Form>\r\n                        <Button\r\n                          fluid\r\n                          onClick={() => fileInputRef.current.click()}\r\n                        >\r\n                          Change Avatar\r\n                      </Button>\r\n                        <input\r\n                          ref={fileInputRef}\r\n                          type=\"file\"\r\n                          hidden\r\n                          onChange={fileChange}\r\n                        />\r\n                      </Form>\r\n                    </Card.Content>\r\n                  </Card>\r\n                </Grid.Column>\r\n                <Grid.Column width={11}>\r\n                  <Form\r\n                    size=\"small\"\r\n                    onSubmit={onSubmit}\r\n                    noValidate\r\n                    className={loading ? \"loading\" : \"\"}\r\n                  >\r\n                    <Form.Input\r\n                      fluid\r\n                      icon=\"user\"\r\n                      iconPosition=\"left\"\r\n                      placeholder=\"Name\"\r\n                      label=\"Name\"\r\n                      value={values.name}\r\n                      name=\"name\"\r\n                      onChange={onChange}\r\n                      error={errors.name ? true : false}\r\n                    />\r\n                    <Form.Input\r\n                      fluid\r\n                      icon=\"mail\"\r\n                      iconPosition=\"left\"\r\n                      placeholder=\"Email\"\r\n                      label=\"Email\"\r\n                      value={values.email}\r\n                      name=\"email\"\r\n                      onChange={onChange}\r\n                      error={errors.email ? true : false}\r\n                    />\r\n                    <Form.Input\r\n                      fluid\r\n                      icon=\"phone\"\r\n                      iconPosition=\"left\"\r\n                      placeholder=\"Phone Number\"\r\n                      label=\"Phone Number\"\r\n                      value={values.phone}\r\n                      name=\"phone\"\r\n                      onChange={onChange}\r\n                      error={errors.phone ? true : false}\r\n                    />\r\n                    <Form.Input\r\n                      fluid\r\n                      icon=\"calendar\"\r\n                      iconPosition=\"left\"\r\n                      placeholder=\"Birth Date\"\r\n                      label=\"Birth Date\"\r\n                      name=\"birthDate\"\r\n                      value={values.date}\r\n                      type=\"date\"\r\n                      onChange={onChange}\r\n                    />\r\n                    {/* <Form.Select\r\n                    fluid\r\n                    placeholder=\"City\"\r\n                    label=\"Address\"\r\n                    name=\"city\"\r\n                    // value={values.city}\r\n                    onChange={handleChange}\r\n                    options={options}\r\n                    search\r\n                    selection\r\n                  /> */}\r\n                    <Form.Select\r\n                      fluid\r\n                      placeholder=\"City\"\r\n                      label=\"City\"\r\n                      onChange={handleChange}\r\n                      name=\"city\"\r\n                      control=\"select\"\r\n                      value={`${kotaName}-${kotaId}`}\r\n                      search\r\n                      selection\r\n                    >\r\n                      <option>-</option>\r\n                      {cities &&\r\n                        cities.map((city) => (\r\n                          <>\r\n                            <option value={city.type + \" \" + city.city_name + \"-\" + city.city_id}>\r\n                              {city.city_name + \" \" + city.type}\r\n                            </option>\r\n                          </>\r\n                        ))}\r\n                    </Form.Select>\r\n                    <Form.Input\r\n                      fluid\r\n                      placeholder=\"Districts\"\r\n                      name=\"districts\"\r\n                      value={values.district}\r\n                      onChange={onChange}\r\n                      search\r\n                      selection\r\n                    />\r\n                    <Form.Input\r\n                      fluid\r\n                      placeholder=\"Postal Code\"\r\n                      name=\"postalCode\"\r\n                      value={values.postalCode}\r\n                      onChange={onChange}\r\n                    />\r\n                    <Form.Input\r\n                      fluid\r\n                      placeholder=\"Address Details\"\r\n                      name=\"addressDetails\"\r\n                      value={values.detail}\r\n                      onChange={onChange}\r\n                      control={TextArea}\r\n                    />\r\n                    <Button color=\"teal\" size=\"small\" floated=\"right\">\r\n                      Save\r\n                  </Button>\r\n                  </Form>\r\n                  {showMessage()}\r\n                </Grid.Column>\r\n              </Grid>\r\n            </Card.Content>\r\n          </Card>\r\n        )}\r\n    </>\r\n  );\r\n}\r\nconst FETCH_USER_QUERY = gql`\r\n  query($userId: ID!) {\r\n    getUser(userId: $userId) {\r\n      id\r\n      email\r\n      phone\r\n      address {\r\n        cityName\r\n        cityId\r\n        district\r\n        postalCode\r\n        detail\r\n      }\r\n      balance\r\n      buyer {\r\n        name\r\n        birthDate\r\n        avatar\r\n      }\r\n    }\r\n    getCities {\r\n      city_id\r\n      province_id\r\n      province\r\n      type\r\n      city_name\r\n      postal_code\r\n    }\r\n  }\r\n`;\r\nconst UPDATE_PROFILE_MUTATION = gql`\r\n  mutation updateUserProfile(\r\n    $avatar: String!\r\n    $name: String!\r\n    $email: String!\r\n    $phone: String!\r\n    $birthDate: String!\r\n    $cityName: String!\r\n    $cityId: String!\r\n    $district: String!\r\n    $postalCode: String!\r\n    $detail: String!\r\n  ) {\r\n    updateUserProfile(\r\n      userProfileInput: {\r\n        avatar: $avatar\r\n        name: $name\r\n        email: $email\r\n        phone: $phone\r\n        birthDate: $birthDate\r\n        address: {\r\n          cityName: $cityName\r\n          cityId:$cityId\r\n          district:$district\r\n          postalCode:$postalCode\r\n          detail:$detail\r\n    }\r\n      }\r\n    ) {\r\n      id\r\n      email\r\n      phone\r\n      address {\r\n        cityName\r\n        cityId\r\n        district\r\n        postalCode\r\n        detail\r\n      }\r\n      balance\r\n      token\r\n      buyer {\r\n        name\r\n        birthDate\r\n        avatar\r\n      }\r\n    }\r\n  }\r\n`;\r\n// const UPDATE_PROFILE_MUTATION = gql`\r\n//   mutation updateUserProfile(\r\n//     $avatar: String\r\n//     $name: String!\r\n//     $email: String!\r\n//     $phone: String!\r\n//     $birthDate: String!\r\n//     # $cityName: String!\r\n//     # $district: String!\r\n//     # $postalCode: String!\r\n//     # $detail:String!\r\n//   ) {\r\n//     updateUserProfile(\r\n//       userProfileInput: {\r\n//         avatar: $avatar\r\n//         name: $name\r\n//         email: $email\r\n//         phone: $phone\r\n//         birthDate: $birthDate\r\n//         address:{\r\n//           cityName: \"Kota Bandung - 23\"\r\n//           cityId: \"23\"\r\n//           district: \"Cimahi\"\r\n//           postalCode: \"40111\"\r\n//           detail: \"Jl. Persekutan Dunia Akhirat\"\r\n//         }\r\n//       }\r\n//     ) {\r\n//       token\r\n//       id\r\n//       email\r\n//       phone\r\n//       address {\r\n//         cityName\r\n//         cityId\r\n//         district\r\n//         postalCode\r\n//         detail\r\n//       }\r\n//       balance\r\n//       token\r\n//       buyer {\r\n//         name\r\n//         birthDate\r\n//         avatar\r\n//       }\r\n//     }\r\n//   }\r\n// `;\r\n\r\nconst FETCH_CITIES_QUERY = gql`\r\n  {\r\n    getCities {\r\n      city_id\r\n      province_id\r\n      province\r\n      type\r\n      city_name\r\n      postal_code\r\n    }\r\n  }\r\n`;\r\n\r\nexport default withRouter(EditProfileCard);\r\n","D:\\SKRIPSI\\gowes\\client\\src\\components\\MyItemList.js",["321"],"import React, { useContext } from 'react'\r\nimport { Button, Card, Icon, Grid, Message, Image, Divider } from 'semantic-ui-react';\r\nimport { Link } from 'react-router-dom';\r\nimport gql from 'graphql-tag';\r\nimport { useQuery } from '@apollo/react-hooks';\r\n\r\n\r\n\r\nimport MyItemsCard from '../components/MyItemsCard'\r\nimport { AuthContext } from '../context/auth';\r\n\r\n\r\nfunction MyItemList(props) {\r\n\r\n    const context = useContext(AuthContext);\r\n\r\n    const { loading, data } = useQuery(FETCH_ITEM_SELLER_QUERY, {\r\n        variables: {\r\n            userId: context.user.id\r\n\r\n        }\r\n    })\r\n    const { getSellerItems: sellerItems } = data ? data : []\r\n\r\n    console.log(sellerItems ? \"ada isi\" : \"kosong\")\r\n\r\n    Object.size = function (obj) {\r\n        var size = 0,\r\n            key;\r\n        for (key in obj) {\r\n            if (obj.hasOwnProperty(key)) size++;\r\n        }\r\n        return size;\r\n    };\r\n\r\n    var size = Object.size(sellerItems)\r\n\r\n    return (\r\n        <>\r\n            <Card fluid style={{ boxShadow: '0px 3px 5px rgba(0, 0, 0, 0.2)' }}>\r\n                <Card.Content header=\"My Items\">\r\n                </Card.Content>\r\n                <Button color=\"teal\" as={Link} to=\"/addItem\">\r\n                    <Icon name=\"plus\"></Icon>\r\n                    Add Atem\r\n                </Button>\r\n            </Card>\r\n            {!loading ? (size > 0 ? (\r\n\r\n                <>\r\n                    <Divider />\r\n                    <Grid container verticalAlign='middle'>\r\n                        <Grid.Column width={2} centered>\r\n                        </Grid.Column>\r\n                        <Grid.Column width={2} verticalAlign='middle' >\r\n                            <h4>Item Name</h4>\r\n                        </Grid.Column>\r\n                        <Grid.Column width={3} verticalAlign='middle' c>\r\n                            <h4>Remaining Stock</h4>\r\n                        </Grid.Column>\r\n                        <Grid.Column width={3} verticalAlign='middle' textAlign='center'>\r\n                            <h4>Selled</h4>\r\n                        </Grid.Column>\r\n                        <Grid.Column width={3} verticalAlign='middle' textAlign='center'>\r\n                            <h4>Price</h4>\r\n                        </Grid.Column>\r\n                        <Grid.Column width={2} verticalAlign='middle' textAlign='center'>\r\n                            <h4>Rating</h4>\r\n                        </Grid.Column>\r\n                    </Grid>\r\n                    <Divider />\r\n                    {sellerItems &&\r\n                        sellerItems.map((sellerItem) => (\r\n                            <Grid.Column key={sellerItem.id} style={{ marginBottom: 20 }}>\r\n                                <MyItemsCard item={sellerItem}></MyItemsCard>\r\n                            </Grid.Column>\r\n                        ))}\r\n                </>\r\n            ) : (\r\n                    <>\r\n                        <Message\r\n                            error\r\n                            icon='inbox'\r\n                            header='You dont have any items'\r\n                            content='add items to sell your things'\r\n                        />\r\n                        <br></br>\r\n                        <br></br>\r\n                        <br></br>\r\n                    </>\r\n\r\n                )) : (<h4>Loading...</h4>)\r\n            }\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport const FETCH_ITEM_SELLER_QUERY = gql`\r\n  query($userId: ID!) {\r\n    getSellerItems(userId: $userId){\r\n    id\r\n    name\r\n    price\r\n    createdAt\r\n    description\r\n    weight\r\n    images{\r\n      id\r\n      downloadUrl\r\n    }\r\n    bookmarkedBy{\r\n      id\r\n      userId\r\n      createdAt\r\n    }\r\n    user{\r\n      seller{\r\n        username\r\n      }\r\n    }\r\n  }\r\n  }\r\n`;\r\n\r\nexport default MyItemList","D:\\SKRIPSI\\gowes\\client\\src\\components\\MyItemsCard.js",["322"],"import React, { useContext } from 'react';\r\nimport { Card, Icon, Image, Grid } from 'semantic-ui-react';\r\nimport { Link } from 'react-router-dom';\r\nimport '../App.css';\r\n\r\nimport { AuthContext } from '../context/auth';\r\n\r\nfunction MyItemsCard({item: { id,name, price, stock }}) {\r\n    const { user } = useContext(AuthContext);\r\n\r\n    return (\r\n        <Card fluid  style={{ boxShadow: '0px 3px 5px rgba(0, 0, 0, 0.2)' }}>\r\n            <Grid container>\r\n                <Grid.Column width={2} centered>\r\n                    <Image\r\n                        fluid\r\n                        centered\r\n                        rounded\r\n                        src='https://react.semantic-ui.com/images/avatar/large/molly.png'\r\n                        size='small'\r\n                        style={{ margin: 10 }}\r\n                        as={Link}\r\n                        to={`/items/${id}`}\r\n                    />\r\n                </Grid.Column>\r\n                <Grid.Column width={2} verticalAlign='middle'>\r\n                    <h4>{name}</h4>\r\n                </Grid.Column>\r\n                <Grid.Column width={3} verticalAlign='middle' textAlign='center'>\r\n                    <h4>4</h4>\r\n                </Grid.Column>\r\n                <Grid.Column width={3} verticalAlign='middle' textAlign='center'>\r\n                    <h4>100</h4>\r\n                </Grid.Column>\r\n                <Grid.Column width={3} verticalAlign='middle' textAlign='center'>\r\n                    <h4>{price}</h4>\r\n                </Grid.Column>\r\n                <Grid.Column width={2} verticalAlign='middle' textAlign='center'>\r\n                    <Icon name='star' style={{ color: 'gold' }}></Icon>\r\n                    4\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Card>\r\n    );\r\n}\r\n\r\nexport default MyItemsCard;","D:\\SKRIPSI\\gowes\\client\\src\\pages\\AddItem.js",["323","324","325"],"import React, { useContext, useState } from 'react'\r\nimport { Card, Image, Grid, Button, Form, TextArea, Icon } from 'semantic-ui-react';\r\nimport { useMutation } from '@apollo/react-hooks'\r\nimport gql from 'graphql-tag'\r\n\r\nimport { AuthContext } from '../context/auth'\r\nimport { useForm } from '../util/hooks'\r\n\r\nfunction AddItem(props) {\r\n\r\n    const [errors, setErrors] = useState({})\r\n\r\n    const [isSaved, setSave] = useState(false)\r\n\r\n    const { onChange, onSubmit, values } = useForm(addItem, {\r\n        name: '',\r\n        price: 0,\r\n        stock: 0,\r\n        category: '',\r\n        condition: '',\r\n        weight: 0,\r\n        description: '',\r\n        length: 0,\r\n        width: 0,\r\n        height: 0\r\n    })\r\n\r\n    const [submitItem, { loading }] = useMutation(ADD_ITEM_MUTATION, {\r\n        update(_, { data: { addItem: items } }) {\r\n            // context.login(items)\r\n            setSave(true)\r\n            setErrors({})\r\n            props.history.push('/mystore/myItemsList')\r\n            console.log(\"data\", addItem)\r\n            window.location.href = '/myStore/myItemsList'\r\n        },\r\n        onError(err) {\r\n            setErrors(err.graphQLErrors[0].extensions.exception.errors);\r\n            console.log(err.graphQLErrors[0])\r\n            setSave(true)\r\n        },\r\n        variables: values\r\n    })\r\n\r\n    function addItem() {\r\n        values.price = parseInt(values.price)\r\n        values.stock = parseInt(values.stock)\r\n        values.weight = parseInt(values.weight)\r\n        values.length = parseInt(values.length)\r\n        values.width = parseInt(values.width)\r\n        values.height = parseInt(values.height)\r\n        submitItem()\r\n    }\r\n    console.log(values)\r\n\r\n    const showMessage = () => {\r\n        if (isSaved) {\r\n            console.log(errors)\r\n            if (Object.keys(errors).length > 0) {\r\n                return (<div className='ui error message'>\r\n                    <ul className=\"list\">\r\n                        {Object.values(errors).map(value => (<li key={value}>{value}</li>))}\r\n                    </ul>\r\n                </div>)\r\n            } else {\r\n                return (\r\n                    <div className='ui positive message'>\r\n                        <ul className=\"list\">\r\n                            Updated\r\n                        </ul>\r\n                    </div>\r\n                )\r\n            }\r\n\r\n        } else {\r\n            return <div></div>\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Grid centered stackable>\r\n            <Grid.Column width={12}>\r\n                <Card fluid>\r\n                    <Card.Content header='Item Image' />\r\n                    <Card.Content>\r\n                        <Image\r\n                            rounded\r\n                            src='https://react.semantic-ui.com/images/avatar/large/molly.png'\r\n                            size='small'\r\n                            style={{ marginRight: 5 }}\r\n                        />\r\n                        <Image\r\n                            rounded\r\n                            src='https://react.semantic-ui.com/images/avatar/large/molly.png'\r\n                            size='small'\r\n                            style={{ marginRight: 5 }}\r\n                        />\r\n                        <Image\r\n                            rounded\r\n                            src='https://react.semantic-ui.com/images/avatar/large/molly.png'\r\n                            size='small'\r\n                            style={{ marginRight: 5 }}\r\n                        />\r\n                    </Card.Content>\r\n                    <Card.Content extra>\r\n                        <Button\r\n                            fluid\r\n                            color='standard'\r\n                            size='small'\r\n                        >\r\n                            <Icon name=\"plus\"></Icon>\r\n                            add Image\r\n                            </Button>\r\n                    </Card.Content>\r\n                </Card>\r\n                <Card fluid>\r\n                    <Card.Content header='Item Details' />\r\n                    <Card.Content extra>\r\n                        <Form size='small' onSubmit={onSubmit} noValidate className={loading ? \"loading\" : \"\"} noValidate>\r\n                            <Form.Input\r\n                                fluid\r\n                                placeholder='Item Name'\r\n                                label='Item Name'\r\n                                value={values.name}\r\n                                name=\"name\"\r\n                                onChange={onChange}\r\n                            />\r\n                            <Form.Group inline>\r\n                                <Form.Field\r\n                                    fluid\r\n                                    placeholder='Category'\r\n                                    label='Category'\r\n                                    onChange={onChange}\r\n                                    name=\"category\"\r\n                                    control='select'\r\n                                    value={values.category}\r\n                                >\r\n                                    <option value='-'>-</option>\r\n                                    <option value='sparepart'>Sparepart</option>\r\n                                    <option value='accessories'>Accessories</option>\r\n                                    <option value='apparel'>Apparel</option>\r\n                                </Form.Field>\r\n                                <Form.Field\r\n                                    fluid\r\n                                    placeholder='Condition'\r\n                                    label='Condition'\r\n                                    onChange={onChange}\r\n                                    name=\"condition\"\r\n                                    control='select'\r\n                                    value={values.condition}\r\n                                >\r\n                                    <option value='-'>-</option>\r\n                                    <option value='new'>New</option>\r\n                                    <option value='used'>Used</option>\r\n                                </Form.Field>\r\n                            </Form.Group>\r\n                            <Form.Input\r\n                                fluid\r\n                                iconPosition='left'\r\n                                placeholder='Item Description'\r\n                                label='Description'\r\n                                control={TextArea}\r\n                                value={values.description}\r\n                                name=\"description\"\r\n                                onChange={onChange}\r\n\r\n                            />\r\n                            <Form.Group inline widths='equal'>\r\n                                <Form.Input\r\n                                    fluid\r\n                                    placeholder='Rp'\r\n                                    label='Price'\r\n                                    value={values.price}\r\n                                    name=\"price\"\r\n                                    type=\"number\"\r\n                                    onChange={onChange}\r\n                                    min={1}\r\n                                />\r\n                                <Form.Input\r\n                                    fluid\r\n                                    placeholder='Amount Item'\r\n                                    label='Amount Item'\r\n                                    value={values.stock}\r\n                                    name=\"stock\"\r\n                                    type=\"number\"\r\n                                    onChange={onChange}\r\n                                    max={100}\r\n                                    min={1}\r\n                                />\r\n                            </Form.Group>\r\n                            <Form.Group inline widths='equal'>\r\n                                <Form.Input\r\n                                    fluid\r\n                                    placeholder='kg'\r\n                                    label='Weight'\r\n                                    value={parseInt(values.weight)}\r\n                                    name=\"weight\"\r\n                                    type=\"number\"\r\n                                    onChange={onChange}\r\n                                    max={10}\r\n                                    min={1}\r\n\r\n                                />\r\n                                <Form.Input\r\n                                    fluid\r\n                                    placeholder='cm'\r\n                                    label='Length'\r\n                                    value={values.length}\r\n                                    name=\"length\"\r\n                                    type=\"number\"\r\n                                    onChange={onChange}\r\n                                    max={1000}\r\n                                    min={1}\r\n                                />\r\n                                <Form.Input\r\n                                    fluid\r\n                                    placeholder='cm'\r\n                                    label='Width'\r\n                                    value={values.width}\r\n                                    name=\"width\"\r\n                                    type=\"number\"\r\n                                    max={1000}\r\n                                    min={1}\r\n                                    onChange={onChange}\r\n                                />\r\n                                <Form.Input\r\n                                    fluid\r\n                                    placeholder='cm'\r\n                                    label='Height'\r\n                                    value={values.height}\r\n                                    name=\"height\"\r\n                                    type=\"number\"\r\n                                    onChange={onChange}\r\n                                    max={1000}\r\n                                    min={1}\r\n                                />\r\n                            </Form.Group>\r\n                            <Button\r\n                                fluid\r\n                                color='teal'\r\n                                size='small'\r\n                            >\r\n                                Save Item\r\n                            </Button>\r\n                        </Form>\r\n                        {showMessage()}\r\n                    </Card.Content>\r\n                </Card>\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nconst ADD_ITEM_MUTATION = gql`\r\n  mutation addItem(\r\n    $name: String!\r\n    $price: Int!\r\n    $stock: Int!\r\n    $category: String!\r\n    $condition: String!\r\n    $weight: Int!\r\n    $description: String!\r\n    $length: Int!\r\n    $width: Int!\r\n    $height: Int!\r\n  ) {\r\n    addItem(addItemInput:{\r\n        name: $name,\r\n        price: $price,\r\n        stock: $stock,\r\n        category: $category,\r\n        condition: $condition,\r\n        weight: $weight,\r\n        description: $description\r\n        dimension: {\r\n            length: $length,\r\n            width: $width\r\n            height: $height\r\n        },\r\n        images: [{\r\n            downloadUrl:\"\"\r\n        }]\r\n    }){\r\n        id\r\n        name\r\n        price\r\n        stock\r\n        category\r\n        condition\r\n        weight\r\n        description\r\n        dimension {\r\n            length\r\n            width\r\n            height\r\n        }\r\n        images {\r\n            downloadUrl\r\n        }\r\n        createdAt\r\n    }\r\n    }\r\n  \r\n`\r\n\r\nexport default AddItem","D:\\SKRIPSI\\gowes\\client\\src\\components\\ItemTransactionCard.js",["326","327"],"import React, { useState } from 'react';\r\nimport { Card, Button, Icon, List, Sticky, Header, Input, Message } from 'semantic-ui-react';\r\nimport { useMutation, useQuery } from '@apollo/react-hooks';\r\nimport gql from 'graphql-tag'\r\nimport { FETCH_CART_QUERY } from '../util/graphql';\r\n\r\n\r\nimport { FETCH_USER_CART_QUERY } from '../util/graphql';\r\n\r\n\r\nfunction ItemTransactionCard({ props, contextRef, item, onChatVisible }) {\r\n\r\n    const [amountItem, setAmountItem] = useState(1)\r\n    const [visible, setVisible] = useState(false)\r\n    const [errors, setErrors] = useState({})\r\n\r\n    const handleDismiss = () => { setVisible(false) }\r\n\r\n    const [addToCart] = useMutation(ADD_TO_CART_MUTATION, {\r\n        variables: { itemId: item.id, amountItem: amountItem },\r\n        update(proxy, result) {\r\n            const data = proxy.readQuery({\r\n                query: FETCH_USER_CART_QUERY\r\n            })\r\n\r\n            proxy.writeQuery({\r\n                query: FETCH_USER_CART_QUERY,\r\n                data: {\r\n                    getUserCartItems: [result.data.addCartItem, ...data.getUserCartItems]\r\n                }\r\n            })\r\n\r\n            const cartItem = proxy.readQuery({\r\n                query: FETCH_CART_QUERY\r\n            })\r\n            proxy.writeQuery({\r\n                query: FETCH_CART_QUERY,\r\n                data: {\r\n                    getUserCartItem: cartItem.getUserCartItem\r\n                }\r\n            })\r\n\r\n            \r\n        },\r\n        onError(err) {\r\n            setErrors(err.graphQLErrors[0].extensions.exception.errors);\r\n            console.log(err.graphQLErrors[0])\r\n        },\r\n    })\r\n\r\n    const { loading, data: userCartData, refetch } = useQuery(FETCH_CART_QUERY, {\r\n        variables: {\r\n            itemId: item.id\r\n        }\r\n    })\r\n    const { getUserCartItem: cartItem } = userCartData ? userCartData : []\r\n    let inCartAmount = 0\r\n\r\n    if (cartItem) {\r\n        inCartAmount = cartItem.amountItem\r\n    }\r\n\r\n    console.log(visible)\r\n\r\n    function addItemToCart() {\r\n        // refetch()\r\n        addToCart()\r\n        setVisible(true)\r\n        // window.location.href='/items'\r\n        window.location.reload(false);\r\n    }\r\n\r\n    let itemMarkup = (\r\n        <h1>loading...</h1>\r\n    )\r\n    if (!loading) {\r\n        itemMarkup = (\r\n            <>\r\n                <Sticky context={contextRef} offset={130}>\r\n                    <Card style={{ boxShadow: '0px 3px 5px rgba(0, 0, 0, 0.2)' }}>\r\n                        <Card.Content>\r\n                            <List>\r\n                                <List.Item>\r\n                                    <List.Content floated='right'>\r\n                                        <Icon name=\"angle down\" />\r\n                                    </List.Content>\r\n                                    <List.Content><Header as=\"h4\">Set amount and note</Header></List.Content>\r\n                                </List.Item>\r\n                                <List.Item>\r\n                                    <List horizontal>\r\n                                        <List.Item>\r\n                                            <Button\r\n                                                onClick={() => { setAmountItem(amountItem - 1) }}\r\n                                                disabled={amountItem <= 1}\r\n                                                size=\"mini\"\r\n                                                circular\r\n                                                icon=\"minus\" />\r\n                                        </List.Item>\r\n                                        <List.Item>\r\n                                            <Input\r\n                                                transparent\r\n                                                placeholder='1'\r\n                                                value={amountItem}\r\n                                                style={{ width: 18 }} />\r\n                                        </List.Item>\r\n                                        <List.Item>\r\n                                            <Button\r\n                                                onClick={() => { setAmountItem(amountItem + 1) }}\r\n                                                disabled={inCartAmount + amountItem >= item.stock}\r\n                                                size=\"mini\"\r\n                                                circular\r\n                                                icon=\"plus\" />\r\n                                        </List.Item>\r\n                                        <List.Item>{`Stok  ${item.stock}`}</List.Item>\r\n                                    </List>\r\n                                </List.Item>\r\n                                <List.Item>\r\n                                    <List.Content floated='left' verticalAlign=\"middle\">\r\n                                        <Header as=\"h5\">Sub Total</Header>\r\n                                    </List.Content>\r\n                                    <List.Content floated='right'>\r\n                                        <Header as=\"h3\">{`Rp${item.price * amountItem}`}</Header>\r\n                                    </List.Content>\r\n                                </List.Item>\r\n                                <List.Item>\r\n\r\n                                </List.Item>\r\n                            </List>\r\n                        </Card.Content>\r\n                        <Card.Content extra>\r\n                            <div className='ui two buttons'>\r\n                                <Button animated='fade'>\r\n                                    <Button.Content visible>Buy</Button.Content>\r\n                                    <Button.Content hidden floated='left' style={{ borderRadius: 8, marginRight: 2 }}>\r\n                                        Checkout Now!\r\n                            </Button.Content>\r\n                                </Button>\r\n                                <Button color=\"teal\" animated='vertical' onClick={addItemToCart} disabled={inCartAmount === item.stock}>\r\n                                    <Button.Content visible>\r\n                                        <Icon name=\"cart arrow down\" />\r\n                                    </Button.Content>\r\n                                    <Button.Content hidden icon floated='right' style={{ borderRadius: 8, marginLeft: 2 }}>\r\n                                        Add to Cart\r\n                            </Button.Content>\r\n                                </Button>\r\n                            </div>\r\n                            <div className='ui two buttons' style={{ marginTop: 8, marginLeft: 2 }}>\r\n                                <Button animated onClick={() => onChatVisible()}>\r\n                                    <Button.Content visible>\r\n                                        <Icon name=\"chat\" />{\" Chat\"}\r\n                                    </Button.Content>\r\n                                    <Button.Content hidden style={{ borderRadius: 8 }}>\r\n                                        Go to Chat?\r\n                                    </Button.Content>\r\n                                </Button>\r\n                            </div>\r\n                        </Card.Content>\r\n                    </Card>\r\n                    {visible ? (\r\n                        <Message\r\n                            positive\r\n                            onDismiss={handleDismiss}\r\n                            header='Added to cart!'\r\n                            content='Open cart menu for details.'\r\n                            style={{ boxShadow: '0px 3px 5px rgba(0, 0, 0, 0.2)' }}\r\n                        />\r\n                    ) : (<div></div>)\r\n                    }\r\n\r\n                </Sticky>\r\n            </>\r\n        )\r\n    }\r\n    return itemMarkup\r\n}\r\n\r\nconst ADD_TO_CART_MUTATION = gql`\r\n    mutation addCartItem($itemId:ID!, $amountItem: Int!){\r\n        addCartItem(itemId: $itemId, note:\"\", amountItem:$amountItem)  {\r\n            note\r\n            amountItem\r\n            createdAt\r\n        }\r\n    }\r\n`\r\n\r\n\r\nexport default ItemTransactionCard","D:\\SKRIPSI\\gowes\\client\\src\\components\\ItemDetailCard.js",["328"],"import React from 'react';\r\nimport { Container, Header, Icon, List, Image, Divider } from 'semantic-ui-react';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nfunction ItemDetailCard({ item }) {\r\n    let itemDetailMarkup = (<p>Loading item..</p>)\r\n    console.log(item.user.seller.id)\r\n    if (item) {\r\n        itemDetailMarkup = (\r\n            <Container>\r\n                <Header as='h2'>{item.name}</Header>\r\n                <List horizontal>\r\n                    <List.Item>Terjual 10</List.Item>\r\n                    <List.Item>\r\n                    <Icon name='star' style={{ color: 'gold' }}/>\r\n                    {\" 5 (44 Ulasan)\"}\r\n                    </List.Item>\r\n                </List>\r\n                <Header as='h1'>Rp{item.price}</Header>\r\n                <Container>\r\n                    <List>\r\n                    <List.Item>Condition: {item.condition}</List.Item>\r\n                    <List.Item>Category: {item.category}</List.Item>\r\n                    <List.Item>Weight: {item.weight} Gram</List.Item>\r\n                    </List>\r\n                </Container>\r\n                <br></br>\r\n                <Container>\r\n                    <h4>Description</h4>\r\n                    <p>{item.description}</p>\r\n                </Container>\r\n                <Divider />\r\n                <Container>\r\n                    <List horizontal>\r\n                    <List.Item>\r\n                        <Image\r\n                        src='https://react.semantic-ui.com/images/wireframe/image-text.png'\r\n                        as='a'\r\n                        size='mini'\r\n                        as={Link} to={`/sellerProfile/${item.user.id}`}\r\n                        // target='_blank'\r\n                        />\r\n                    </List.Item>\r\n                    <List.Item>\r\n                        <Header as='h3' style={{color:'black'}}  >{item.user.seller.username}</Header>\r\n                    </List.Item>\r\n                    <List.Item>\r\n                        <Icon name='star' style={{ color: 'gold' }}/>\r\n                        {\" 4.8 rating toko\"}\r\n                    </List.Item>\r\n                    </List>\r\n                </Container>\r\n                <Divider />\r\n            </Container>\r\n        )\r\n    }\r\n    return itemDetailMarkup\r\n}\r\nexport default ItemDetailCard","D:\\SKRIPSI\\gowes\\client\\src\\components\\ItemImagesCard.js",[],"D:\\SKRIPSI\\gowes\\client\\src\\components\\ItemReviewsCard.js",["329"],"import React from 'react';\r\nimport { Item, Container, Rating, Label, List, Image } from 'semantic-ui-react';\r\nimport 'swiper/swiper.scss';\r\n\r\nfunction ItemReviewsCard({ reviews }) {\r\n  return (\r\n    <Container>\r\n      <Item.Group divided>\r\n        {reviews.map((review, index) => (\r\n          <Item>\r\n            <Item.Image size=\"small\" src={review.user.buyer.avatar} />\r\n            <Item.Content>\r\n              <Item.Header as='a'>\r\n                <Rating disabled maxRating={5} defaultRating={review.score} icon='star' size='mini' />\r\n              </Item.Header>\r\n              <Item.Meta>\r\n                <span className='cinema'>{review.body}</span>\r\n              </Item.Meta>\r\n              <List horizontal>\r\n                {review.images.map((image, index) => (\r\n                  <Image src={image.downloadUrl} style={{ width: 60, height: 60 }} />\r\n                ))}\r\n              </List>\r\n            </Item.Content>\r\n          </Item>\r\n        ))}\r\n      </Item.Group>\r\n\r\n    </Container>\r\n\r\n  )\r\n}\r\nexport default ItemReviewsCard","D:\\SKRIPSI\\gowes\\client\\src\\components\\CartCard.js",["330"],"import React from 'react';\r\nimport { Card, Checkbox } from 'semantic-ui-react';\r\nimport gql from 'graphql-tag'\r\nimport ItemCartCard from '../components/ItemCartCard';\r\n\r\n\r\nfunction CartCard({ cartItem }) {\r\n\r\n    console.log(cartItem)\r\n\r\n    \r\n    // console.log(id)\r\n\r\n    return (\r\n        <Card fluid style={{ boxShadow: '0px 3px 5px rgba(0, 0, 0, 0.2)' }}>\r\n            <Card.Content>\r\n                <Checkbox\r\n                    label={cartItem[0].item.user.seller.username}\r\n                    style={{ fontWeight: 1000 }}\r\n                />\r\n            </Card.Content>\r\n            {cartItem &&\r\n                cartItem.map((item) => (\r\n                    <ItemCartCard item={item}></ItemCartCard>\r\n                ))}\r\n        </Card>\r\n    );\r\n}\r\n\r\nconst DELETE_CART_ITEM_MUTATION = gql`\r\n    mutation deleteCartItem($cartId:ID!){\r\n        deleteCartItem(cartId: $cartId)\r\n    }\r\n`\r\n\r\nexport default CartCard;","D:\\SKRIPSI\\gowes\\client\\src\\components\\ItemCartCard.js",["331","332","333","334"],"import React, { useState } from 'react';\r\nimport { Card, Grid, Form, Checkbox, Image, Button, Icon, List, Input } from 'semantic-ui-react';\r\nimport gql from 'graphql-tag'\r\nimport { useMutation } from '@apollo/react-hooks'\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nimport { FETCH_USER_CART_QUERY } from '../util/graphql';\r\n\r\nfunction ItemCartCard({ item }) {\r\n\r\n    const [amountItem, setAmountItem] = useState(item.amountItem)\r\n    const [errors, setErrors] = useState({})\r\n\r\n    console.log(item.item.stock)\r\n\r\n    console.log(item.name)\r\n\r\n    const [deleteItemCart] = useMutation(DELETE_CART_ITEM_MUTATION, {\r\n        update(proxy, result) {\r\n            // TODO: remove post cache\r\n            const data = proxy.readQuery({\r\n                query: FETCH_USER_CART_QUERY\r\n            })\r\n            proxy.writeQuery({\r\n                query: FETCH_USER_CART_QUERY,\r\n                data: {\r\n                    getUserCartItems: data.getUserCartItems.filter(cart => cart.id !== item.id)\r\n                }\r\n            })\r\n        },\r\n        variables: { cartId: item.id }\r\n    })\r\n\r\n\r\n    return (\r\n        <>\r\n            <Card.Content>\r\n                <Grid doubling>\r\n                    <Grid.Column width={1} verticalAlign='middle'></Grid.Column>\r\n\r\n                    <Grid.Column width={2} verticalAlign=\"middle\" style={{ padding: 5 }} >\r\n                        <Image\r\n                            fluid\r\n                            centered\r\n                            rounded\r\n                            src='https://react.semantic-ui.com/images/avatar/large/molly.png'\r\n                            size='small'\r\n                            as={Link} to={`/items/${item.item.id}`}\r\n                        />\r\n                    </Grid.Column>\r\n                    <Grid.Column width={13} style={{ marginTop: 5 }}>\r\n                        <Grid.Row><h4 >{item.item.name}</h4></Grid.Row>\r\n                        <Grid.Row style={{ marginTop: 5 }}>\r\n                            <h4 style={{ color: 'teal' }}>Rp{item.item.price}</h4>\r\n                        </Grid.Row>\r\n                        <Grid.Row style={{ marginTop: 5 }}>\r\n                            <Grid>\r\n                                <Grid.Column width={10}>\r\n                                    <Form size=\"small\">\r\n                                        <Form.Group>\r\n                                            <Form.Input\r\n                                                placeholder='Add Notes'\r\n                                                name='notes'\r\n                                            // value={notes}\r\n                                            // onChange={this.handleChange}\r\n                                            />\r\n                                            {/* <Form.Button size=\"mini\" content='Submit' /> */}\r\n                                        </Form.Group>\r\n                                    </Form>\r\n                                </Grid.Column>\r\n                                <Grid.Column width={6}>\r\n                                    <Icon onClick={deleteItemCart} size=\"large\" color=\"grey\" name=\"trash\" style={{ marginRight: 40 }}></Icon>\r\n                                    <List horizontal>\r\n                                        <List.Item>\r\n                                            <Button\r\n                                                onClick={() => { setAmountItem(amountItem - 1) }}\r\n                                                disabled={amountItem === 1}\r\n                                                disabled={amountItem <= 1}\r\n                                                size=\"mini\"\r\n                                                secondary icon=\"minus\"\r\n                                            />\r\n                                        </List.Item>\r\n                                        <List.Item>\r\n                                            <Input\r\n                                                transparent\r\n                                                placeholder='1'\r\n                                                value={amountItem}\r\n                                                style={{ width: 18 }} />\r\n                                        </List.Item>\r\n                                        <List.Item>\r\n                                            <Button\r\n                                                onClick={() => { setAmountItem(amountItem + 1) }}\r\n                                                size=\"mini\"\r\n                                                secondary icon=\"plus\"\r\n                                                disabled={amountItem >= item.item.stock}\r\n                                            />\r\n                                        </List.Item>\r\n                                        {/* <List.Item>{`Stok  ${item.stock}`}</List.Item> */}\r\n                                    </List>\r\n                                </Grid.Column>\r\n                            </Grid>\r\n                        </Grid.Row>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Card.Content>\r\n        </>\r\n    );\r\n}\r\nconst DELETE_CART_ITEM_MUTATION = gql`\r\n    mutation deleteCartItem($cartId:ID!){\r\n        deleteCartItem(cartId: $cartId)\r\n    }\r\n`\r\nexport default ItemCartCard;","D:\\SKRIPSI\\gowes\\client\\src\\components\\ItemSummaryCard.js",["335","336"],"import React, { useState } from 'react';\r\nimport { Card, Sticky, Grid, Divider, Button, List } from 'semantic-ui-react';\r\nimport { Link } from 'react-router-dom'\r\n\r\n\r\nfunction ItemSummaryCard({ contextRef }) {\r\n    return (\r\n        <Sticky context={contextRef} offset={130}>\r\n            <Card fluid style={{ boxShadow: '0px 3px 5px rgba(0, 0, 0, 0.2)' }}>\r\n                <Card.Content header=\"Shopping Summary\" />\r\n                <Card.Content>\r\n                    <List divided verticalAlign='middle'>\r\n                        <List.Item>\r\n                            <List.Content floated='right'>Rp50.000</List.Content>\r\n                            <List.Content style={{ marginBottom: 5 }}>Item</List.Content>\r\n                            <List.Content floated='right'>Rp100.000</List.Content>\r\n                            <List.Content style={{ marginBottom: 5 }}>Item (x2)</List.Content>\r\n                            <List.Content floated='right'>Rp50.000</List.Content>\r\n                            <List.Content style={{ marginBottom: 5 }}>Item</List.Content>\r\n                        </List.Item>\r\n                    </List>\r\n                    <Divider />\r\n                    <List divided verticalAlign='middle'>\r\n                        <List.Item>\r\n                            <List.Content floated='right'>Rp200.000</List.Content>\r\n                            <List.Content style={{ marginBottom: 5 }}><h4>Sub Total</h4></List.Content>\r\n                        </List.Item>\r\n                    </List>\r\n                </Card.Content>\r\n                <Card.Content extra>\r\n                    <Button fluid color=\"teal\" as={Link} to=\"/checkout\">Checkout</Button>\r\n                </Card.Content>\r\n            </Card>\r\n        </Sticky>\r\n    )\r\n}\r\nexport default ItemSummaryCard","D:\\SKRIPSI\\gowes\\client\\src\\components\\ReviewSummaryCard.js",["337","338","339","340","341"],"import React, { useState } from 'react';\r\nimport { Grid, Rating, Header, List, Progress, Icon, Item, Container } from 'semantic-ui-react';\r\nimport ProgressBar from './ProgressBar'\r\n\r\nfunction ReviewSummaryCard({ item }) {\r\n    const [amountItem, setAmountItem] = useState(1)\r\n    const progressStyle = {\r\n        backgroundColor:'#FEFEFE',\r\n        marginBottom: 10\r\n    }\r\n\r\n    const rateStars = [{\r\n        star: 5,\r\n        amountReviewers: 10\r\n    },{\r\n        star: 4,\r\n        amountReviewers: 5\r\n    },{\r\n        star: 3,\r\n        amountReviewers: 2\r\n    },{\r\n        star: 2,\r\n        amountReviewers: 0\r\n    },{\r\n        star: 1,\r\n        amountReviewers: 0\r\n    }]\r\n\r\n    let totalReviewer = 0;\r\n    rateStars.map((rate) => totalReviewer += rate.amountReviewers)\r\n    \r\n\r\n    let markup = (<Grid>\r\n        <Grid.Column width={8}>\r\n            <Grid>\r\n            <Grid.Row>\r\n                <Container>\r\n                    <Header as=\"h4\">ULASAN(145)</Header>\r\n                    <p className='cinema'>Case Xiaomi Poco X3 NFC Nillkin CamShield - Hitam</p>\r\n                </Container>\r\n            </Grid.Row>\r\n            <Grid.Row>\r\n                <Grid.Column width={6} style={{padding: 0, marginTop:20}}>\r\n                    <List>\r\n                        <span style={{fontSize:60, fontStyle:'bold'}}>4.9</span>\r\n                        <span>/5</span>\r\n                        <List.Item>\r\n                            <Rating disabled maxRating={5} defaultRating={4} icon='star' size='large' />\r\n                        </List.Item>\r\n                        <List.Item>\r\n                            <span style={{}}>(145) Ulasan</span>\r\n                        </List.Item>\r\n                    </List>\r\n                </Grid.Column>\r\n                <Grid.Column width={3} style={{ paddingRight: 0 }}>\r\n                    <List>\r\n                        {rateStars.map((rate) => \r\n                            (<List.Item>\r\n                            <Icon style={{ color: 'gold' }} name=\"star\"/>\r\n                            {` ${rate.star}`}\r\n                        </List.Item>)\r\n\r\n                        )}\r\n                       \r\n                    </List>\r\n                </Grid.Column>\r\n                <Grid.Column width={5} style={{ padding: 0, marginTop: 4 }}>\r\n                    <List>\r\n                        {rateStars.map((rate, index) => (\r\n                        <List.Item>\r\n                            <ProgressBar key={index} bgcolor={\"#00B5AD\"} completed={rate.amountReviewers / totalReviewer * 100}/>\r\n                            {/* <Progress size=\"tiny\" percent={rate.amountReviewers / totalReviewer * 100} success style={progressStyle}/> */}\r\n                        </List.Item>\r\n                        ))}\r\n                    </List>\r\n                </Grid.Column>\r\n                <Grid.Column width={2}>\r\n                    <List>\r\n                        {rateStars.map((rate) => (\r\n                        <List.Item>\r\n                            {rate.amountReviewers}\r\n                        </List.Item>\r\n                        ))}\r\n                    </List>\r\n                </Grid.Column>\r\n            </Grid.Row>\r\n            </Grid>\r\n        </Grid.Column>\r\n    </Grid>);\r\n    return markup\r\n}\r\nexport default ReviewSummaryCard","D:\\SKRIPSI\\gowes\\client\\src\\components\\ProgressBar.js",["342"],"import React from \"react\";\r\n\r\nconst ProgressBar = (props) => {\r\n    const { bgcolor, completed } = props;\r\n  \r\n    const containerStyles = {\r\n      height: 8,\r\n      width: '100%',\r\n      backgroundColor: \"#e0e0de\",\r\n      borderRadius: 50,\r\n      marginBottom: 8\r\n    }\r\n  \r\n    const fillerStyles = {\r\n      height: '100%',\r\n      width: `${completed}%`,\r\n      backgroundColor: bgcolor,\r\n      borderRadius: 'inherit',\r\n      textAlign: 'right'\r\n    }\r\n  \r\n    const labelStyles = {\r\n      padding: 5,\r\n      color: 'white',\r\n      fontWeight: 'bold'\r\n    }\r\n  \r\n    return (\r\n      <div style={containerStyles}>\r\n        <div style={fillerStyles}>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n  \r\n  export default ProgressBar;","D:\\SKRIPSI\\gowes\\client\\src\\components\\MyOrders.js",["343","344"],"import React, { useState } from 'react'\r\nimport { Button, Grid } from 'semantic-ui-react';\r\nimport { Link, useHistory } from 'react-router-dom'\r\nimport CardMyOrders from './CardMyOrders'\r\n\r\nfunction MyOrders(props) {\r\n\r\n    const [activeItem, setActiveItem] = useState(\"all\")\r\n\r\n    const handleItemClick = (e, { name }) => {\r\n        setActiveItem(name)\r\n    }\r\n\r\n    var contentToShow\r\n\r\n    contentToShow = <CardMyOrders filter={activeItem}></CardMyOrders>\r\n\r\n    return (\r\n        <>\r\n            <Grid stackable>\r\n                <Grid.Row>\r\n                    <Grid columns={7} stackable centered>\r\n                        <Grid.Column>\r\n                            <Button\r\n                                name='all'\r\n                                onClick={handleItemClick}\r\n                                color={activeItem === \"all\" ? \"teal\" : \"\"}\r\n                                size=\"tiny\"\r\n                                fluid\r\n                                style={{ boxShadow: '0px 3px 5px rgba(0, 0, 0, 0.2)' }}\r\n                            >\r\n                                All\r\n                            </Button>\r\n                        </Grid.Column>\r\n                        <Grid.Column>\r\n                            <Button\r\n                                name='waiting for payment'\r\n                                onClick={handleItemClick}\r\n                                color={activeItem === \"waiting for payment\" ? \"teal\" : \"\"}\r\n                                size=\"tiny\"\r\n                                fluid\r\n                                style={{ boxShadow: '0px 3px 5px rgba(0, 0, 0, 0.2)' }}\r\n                            >\r\n                                Waiting For Payment\r\n                            </Button>\r\n                        </Grid.Column>\r\n                        <Grid.Column>\r\n                            <Button\r\n                                name='waiting for confirmation'\r\n                                onClick={handleItemClick}\r\n                                color={activeItem === \"waiting for confirmation\" ? \"teal\" : \"\"}\r\n                                size=\"tiny\"\r\n                                fluid\r\n                                style={{ boxShadow: '0px 3px 5px rgba(0, 0, 0, 0.2)' }}\r\n                            >\r\n                                Waiting For Confirmation\r\n                            </Button>\r\n                        </Grid.Column>\r\n                        <Grid.Column>\r\n                            <Button\r\n                                name='order processed'\r\n                                onClick={handleItemClick}\r\n                                color={activeItem === \"order processed\" ? \"teal\" : \"\"}\r\n                                size=\"tiny\"\r\n                                fluid\r\n                                style={{ boxShadow: '0px 3px 5px rgba(0, 0, 0, 0.2)' }}\r\n                            >\r\n                                Order Processed\r\n                            </Button>\r\n                        </Grid.Column>\r\n                        <Grid.Column>\r\n                            <Button\r\n                                name='order shipped'\r\n                                onClick={handleItemClick}\r\n                                color={activeItem === \"order shipped\" ? \"teal\" : \"\"}\r\n                                size=\"tiny\"\r\n                                fluid\r\n                                style={{ boxShadow: '0px 3px 5px rgba(0, 0, 0, 0.2)' }}\r\n                            >\r\n                                Order Shipped\r\n                            </Button>\r\n                        </Grid.Column>\r\n                        <Grid.Column>\r\n                            <Button\r\n                                name='order arrived'\r\n                                onClick={handleItemClick}\r\n                                color={activeItem === \"order arrived\" ? \"teal\" : \"\"}\r\n                                size=\"tiny\"\r\n                                fluid style={{ boxShadow: '0px 3px 5px rgba(0, 0, 0, 0.2)' }}\r\n                            >\r\n                                Order Arrived\r\n                            </Button>\r\n                        </Grid.Column>\r\n                        <Grid.Column>\r\n                            <Button\r\n                                name='order completed'\r\n                                onClick={handleItemClick}\r\n                                color={activeItem === \"order completed\" ? \"teal\" : \"\"}\r\n                                size=\"tiny\"\r\n                                fluid\r\n                                style={{ boxShadow: '0px 3px 5px rgba(0, 0, 0, 0.2)' }}\r\n                            >Order Completed\r\n                            </Button>\r\n                        </Grid.Column>\r\n                    </Grid>\r\n                </Grid.Row>\r\n                <Grid.Row>\r\n                    <Grid.Column size={16}>\r\n                        {contentToShow}\r\n                        {contentToShow}\r\n                    </Grid.Column>\r\n                </Grid.Row>\r\n            </Grid>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MyOrders","D:\\SKRIPSI\\gowes\\client\\src\\components\\CardMyOrders.js",["345"],"import React, { useState } from 'react'\r\nimport { Button, Card, Grid } from 'semantic-ui-react';\r\n\r\nimport ItemMyOrders from './ItemMyOrders'\r\n\r\nfunction CardMyOrders({ filter }) {\r\n\r\n    return (\r\n        <Card fluid style={{ boxShadow: '0px 3px 5px rgba(0, 0, 0, 0.2)' }}>\r\n            <Card.Content><h5>27 Desember 2020</h5></Card.Content>\r\n            <Card.Content>\r\n                <Grid stackable>\r\n                    <Grid.Column width={7}>\r\n                        <Grid.Row><h4 style={{ color: 'teal' }}>Gebby's Store</h4></Grid.Row>\r\n                        <Grid.Row>(INV/20201229/XX/XII/712589793)</Grid.Row>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={6}>\r\n                        <Grid.Row><div>Status</div></Grid.Row>\r\n                        <Grid.Row><h4 style={{ color: 'teal' }}>{filter}</h4></Grid.Row>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={3}>\r\n                        <Grid.Row><div>Sub Total</div></Grid.Row>\r\n                        <Grid.Row><h4 style={{ color: 'teal' }}>Rp50.000</h4></Grid.Row>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Card.Content>\r\n            <ItemMyOrders></ItemMyOrders>\r\n            <ItemMyOrders></ItemMyOrders>\r\n            <Card.Content>\r\n                <Button floated='right' size='small' color='teal'>See Details</Button>\r\n            </Card.Content>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default CardMyOrders","D:\\SKRIPSI\\gowes\\client\\src\\components\\ItemMyOrders.js",["346"],"import React, { useState } from 'react'\r\nimport { Card, Grid, Image } from 'semantic-ui-react';\r\n\r\nfunction ItemMyOrders() {\r\n\r\n    return (\r\n        <Card.Content>\r\n            <Grid stackable>\r\n                <Grid.Column width={2}>\r\n                    <Image\r\n                        fluid\r\n                        centered\r\n                        rounded\r\n                        src='https://react.semantic-ui.com/images/avatar/large/molly.png'\r\n                        size='tiny'\r\n                        style={{ margin: 10 }}\r\n                    />\r\n                </Grid.Column>\r\n                <Grid.Column width={5} verticalAlign='middle'>\r\n                    <Grid.Row><div>Item Name</div></Grid.Row>\r\n                    <Grid.Row><h4 style={{ color: 'teal' }}>Shimano Tourney 7 Speed</h4></Grid.Row>\r\n                </Grid.Column>\r\n                <Grid.Column width={6} verticalAlign='middle'>\r\n                    <Grid.Row><div>Price</div></Grid.Row>\r\n                    <Grid.Row><h4 style={{ color: 'teal' }}>Rp50.000</h4></Grid.Row>\r\n                </Grid.Column>\r\n                <Grid.Column width={3} verticalAlign='middle'>\r\n                    <Grid.Row><div>Amount Item</div></Grid.Row>\r\n                    <Grid.Row><h4 style={{ color: 'teal' }}>3</h4></Grid.Row>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Card.Content>\r\n    )\r\n}\r\n\r\nexport default ItemMyOrders","D:\\SKRIPSI\\gowes\\client\\src\\components\\ManageItemSticky.js",["347","348","349","350","351","352","353"],"import React, { useState } from 'react';\r\nimport { Card, Button, Icon, List, Sticky, Header, Input, Message } from 'semantic-ui-react';\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport { FETCH_CART_QUERY } from '../util/graphql';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nimport DeleteItemButton from '../components/DeleteItemButton'\r\n\r\n\r\n\r\nfunction ManageItemSticky({ props, contextRef, item }) {\r\n\r\n    const [amountItem, setAmountItem] = useState(1)\r\n    const [visible, setVisible] = useState(false)\r\n    const [errors, setErrors] = useState({})\r\n\r\n    const handleDismiss = () => { setVisible(false) }\r\n\r\n    const { loading, data: userCartData, refetch } = useQuery(FETCH_CART_QUERY, {\r\n        variables: {\r\n            itemId: item.id\r\n        }\r\n    })\r\n    const { getUserCartItem: cartItem } = userCartData ? userCartData : []\r\n    let inCartAmount = 0\r\n\r\n    if (cartItem) {\r\n        inCartAmount = cartItem.amountItem\r\n    }\r\n\r\n    let itemMarkup = (\r\n        <>\r\n            <Sticky context={contextRef} offset={130}>\r\n                <Card style={{ boxShadow: '0px 3px 5px rgba(0, 0, 0, 0.2)' }}>\r\n                    <Card.Content>\r\n                        <List>\r\n                            <List.Item>\r\n                                <List.Content floated='right'>\r\n                                    <Icon name=\"angle down\" />\r\n                                </List.Content>\r\n                                <List.Content><Header as=\"h4\">Set amount and note</Header></List.Content>\r\n                            </List.Item>\r\n                            <List.Item>\r\n                                <List horizontal>\r\n                                    <List.Item>\r\n                                        <Button\r\n                                            onClick={() => { setAmountItem(amountItem - 1) }}\r\n                                            disabled={amountItem <= 1}\r\n                                            size=\"mini\"\r\n                                            circular\r\n                                            icon=\"minus\" />\r\n                                    </List.Item>\r\n                                    <List.Item>\r\n                                        <Input\r\n                                            transparent\r\n                                            placeholder='1'\r\n                                            value={amountItem}\r\n                                            style={{ width: 18 }} />\r\n                                    </List.Item>\r\n                                    <List.Item>\r\n                                        <Button\r\n                                            onClick={() => { setAmountItem(amountItem + 1) }}\r\n                                            disabled={inCartAmount + amountItem >= item.stock}\r\n                                            size=\"mini\"\r\n                                            circular\r\n                                            icon=\"plus\" />\r\n                                    </List.Item>\r\n                                    <List.Item>{`Stok  ${item.stock}`}</List.Item>\r\n                                </List>\r\n                            </List.Item>\r\n                            <List.Item>\r\n                                <List.Content floated='left' verticalAlign=\"middle\">\r\n                                    <Header as=\"h5\">Sub Total</Header>\r\n                                </List.Content>\r\n                                <List.Content floated='right'>\r\n                                    <Header as=\"h3\">{`Rp${item.price * amountItem}`}</Header>\r\n                                </List.Content>\r\n                            </List.Item>\r\n                            <List.Item>\r\n\r\n                            </List.Item>\r\n                        </List>\r\n                    </Card.Content>\r\n                    <Card.Content extra>\r\n                        <div className='ui two buttons'>\r\n                            <Button\r\n                                animated='vertical'\r\n                                as={Link}\r\n                                // to={`/editItem/${item.id}`}\r\n                                to={{\r\n                                    pathname: `/editItem/${item.id}`,\r\n                                    item: {\r\n                                        name: item.name,\r\n                                        price: item.price,\r\n                                        stock: item.stock,\r\n                                        category: item.category,\r\n                                        condition: item.condition,\r\n                                        weight: item.weight,\r\n                                        description: item.description,\r\n                                        length: item.dimension.length,\r\n                                        width: item.dimension.width,\r\n                                        height: item.dimension.height,\r\n                                    }\r\n                                }}\r\n                            >\r\n                                <Button.Content visible>\r\n                                    <Icon name=\"edit\" /> Edit\r\n                                </Button.Content>\r\n                                <Button.Content hidden icon floated='right' style={{ borderRadius: 8, marginLeft: 2 }}>\r\n                                    Modify Item Info\r\n                            </Button.Content>\r\n                            </Button>\r\n                            <DeleteItemButton itemId={item.id}></DeleteItemButton>\r\n                        </div>\r\n                    </Card.Content>\r\n                </Card>\r\n\r\n            </Sticky>\r\n        </>\r\n    )\r\n    return itemMarkup\r\n}\r\n\r\n\r\nexport default ManageItemSticky","D:\\SKRIPSI\\gowes\\client\\src\\components\\DeleteItemButton.js",["354","355"],"import React, { useState, useContext } from \"react\";\r\nimport { useMutation } from '@apollo/react-hooks';\r\nimport gql from 'graphql-tag'\r\nimport { Icon, Button, Confirm, Popup } from 'semantic-ui-react'\r\n\r\nimport { FETCH_POSTS_QUERY } from '../util/graphql';\r\nimport { AuthContext } from '../context/auth';\r\n\r\n\r\nfunction DeleteButton({ itemId }) {\r\n\r\n    const context = useContext(AuthContext);\r\n    const [confirmOpen, setConfirmOpen] = useState(false)\r\n\r\n    console.log(itemId)\r\n\r\n    const [deleteItem] = useMutation(DELETE_ITEM_MUTATION, {\r\n        update(proxy, result) {\r\n            setConfirmOpen(false)\r\n            // TODO: remove post cache\r\n\r\n            const data = proxy.readQuery({\r\n                query: FETCH_ITEM_SELLER_QUERY,\r\n                variables: { userId: context.user.id }\r\n            })\r\n\r\n            proxy.writeQuery({\r\n                query: FETCH_ITEM_SELLER_QUERY,\r\n                data: {\r\n                    getSellerItems: data.getSellerItems.filter(p => p.id !== itemId)\r\n                }\r\n            })\r\n\r\n        },\r\n        variables: { itemId: itemId }\r\n    })\r\n\r\n    function itemDelete() {\r\n        deleteItem()\r\n        window.location.href = '/myStore/myItemsList'\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Button animated='fade' color=\"red\" onClick={() => setConfirmOpen(true)}>\r\n                <Button.Content visible>\r\n                    <Icon name=\"trash\" />\r\n                </Button.Content>\r\n                <Button.Content hidden style={{ borderRadius: 8 }}>\r\n                    Delete Item\r\n                </Button.Content>\r\n            </Button>\r\n\r\n            <Confirm\r\n                open={confirmOpen}\r\n                onCancel={() => setConfirmOpen(false)}\r\n                onConfirm={itemDelete}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nconst DELETE_ITEM_MUTATION = gql`\r\n    mutation deleteItem($itemId:ID!){\r\n        deleteItem(itemId:$itemId)\r\n    }\r\n`\r\n\r\nconst FETCH_ITEM_SELLER_QUERY = gql`\r\n  query($userId: ID!) {\r\n    getSellerItems(userId: $userId){\r\n    id\r\n    name\r\n    price\r\n    createdAt\r\n    description\r\n    weight\r\n    images{\r\n      id\r\n      downloadUrl\r\n    }\r\n    bookmarkedBy{\r\n      id\r\n      userId\r\n      createdAt\r\n    }\r\n    user{\r\n      seller{\r\n        username\r\n      }\r\n    }\r\n  }\r\n  }\r\n`;\r\n\r\n\r\nexport default DeleteButton","D:\\SKRIPSI\\gowes\\client\\src\\pages\\SellerProfile.js",["356"],"import React from 'react';\r\nimport { Grid, Ref  } from 'semantic-ui-react';\r\nimport gql from 'graphql-tag'\r\nimport { useQuery } from '@apollo/react-hooks';\r\n\r\nimport SideBarSellerProfile from '../components/SideBarSellerProfile';\r\nimport ShopCard from '../components/ShopCard';\r\n\r\nfunction SellerProfile(props) {\r\n\r\n    const contextRef = React.createRef();\r\n\r\n    const userId = props.match.params.userId;\r\n\r\n    const { loading, data: itemData, data: userData } = useQuery(FETCH_SELLER_PROFILE_QUERY, {\r\n        variables: {\r\n            userId: userId\r\n        }\r\n    })\r\n    const { getUser: user } = userData ? userData : []\r\n    const { getSellerItems: items } = itemData ? itemData : []\r\n\r\n    Object.size = function (obj) {\r\n        var size = 0,\r\n            key;\r\n        for (key in obj) {\r\n            if (obj.hasOwnProperty(key)) size++;\r\n        }\r\n        return size;\r\n    };\r\n\r\n    var size = Object.size(user)\r\n    let postMarkup = (<p>Loading item..</p>);\r\n    if (size > 0) {\r\n        postMarkup = (\r\n            <Ref innerRef={contextRef}>\r\n                <Grid stackable>\r\n                    <Grid.Column width={4}>\r\n                        <SideBarSellerProfile contextRef={contextRef} user={user}></SideBarSellerProfile>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={12}>\r\n                        <br></br>\r\n                        <Grid stackable columns={5}>\r\n                            {items &&\r\n                                items.map((item) => (\r\n                                    <Grid.Column key={item.id} style={{ marginBottom: 20 }}>\r\n                                        <ShopCard item={item}  />\r\n                                    </Grid.Column>\r\n                                ))}\r\n                        </Grid>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Ref>\r\n        )\r\n    }\r\n    return postMarkup\r\n}\r\n\r\nconst FETCH_SELLER_PROFILE_QUERY = gql`\r\n    query($userId: ID!) {\r\n        getUser(userId: $userId) {\r\n            id\r\n            email\r\n            seller{\r\n            id\r\n            username\r\n            avatar\r\n            description\r\n            description\r\n            createdAt\r\n            }\r\n        }\r\n        getSellerItems(userId: $userId){\r\n            id\r\n            name\r\n            price\r\n            createdAt\r\n            description\r\n            weight\r\n            images{\r\n                id\r\n                downloadUrl\r\n            }\r\n            bookmarkedBy{\r\n                id\r\n                userId\r\n                createdAt\r\n            }\r\n            user{\r\n                id\r\n                seller{\r\n                    username\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    \r\n`;\r\n\r\nexport default SellerProfile","D:\\SKRIPSI\\gowes\\client\\src\\components\\SideBarSellerProfile.js",[],"D:\\SKRIPSI\\gowes\\client\\src\\pages\\EditItem.js",["357","358","359"],"import React, { useState } from 'react'\r\nimport { Card, Image, Grid, Button, Form, TextArea, Icon } from 'semantic-ui-react';\r\nimport { useMutation } from '@apollo/react-hooks'\r\nimport gql from 'graphql-tag'\r\n\r\nimport { useForm } from '../util/hooks'\r\n\r\nfunction EditItem(props) {\r\n\r\n    const itemId = props.match.params.itemId;\r\n    const itemData = props.location.item;\r\n\r\n    const [errors, setErrors] = useState({})\r\n\r\n    const [isSaved, setSave] = useState(false)\r\n\r\n    let userObj\r\n\r\n    if (itemData) {\r\n        userObj = {\r\n            name: itemData.name,\r\n            price: itemData.price,\r\n            stock: itemData.stock,\r\n            category: itemData.category,\r\n            condition: itemData.condition,\r\n            weight: itemData.weight,\r\n            description: itemData.description,\r\n            length: itemData.length,\r\n            width: itemData.width,\r\n            height: itemData.height,\r\n            itemId: itemId\r\n        }\r\n    } else {\r\n        userObj = {\r\n            name: '',\r\n            price: 0,\r\n            stock: 0,\r\n            category: '',\r\n            condition: '',\r\n            weight: 0,\r\n            description: '',\r\n            length: 0,\r\n            width: 0,\r\n            height: 0,\r\n            itemId: itemId\r\n        }\r\n    }\r\n\r\n    let { onChange, onSubmit, values } = useForm(editItem, userObj)\r\n\r\n    const [updateItem, { }] = useMutation(UPDATE_ITEM_MUTATION, {\r\n        update(_, { data: { updateItem: updatedItem } }) {\r\n            console.log(\"no errors\")\r\n            setSave(true)\r\n            setErrors({})\r\n            window.location.href = '/myStore/myItemsList'\r\n        },\r\n        onError(err) {\r\n            setErrors(err.graphQLErrors[0].extensions.exception.errors);\r\n            console.log(err.graphQLErrors[0])\r\n            setSave(true)\r\n            console.log(values)\r\n\r\n        },\r\n        variables: values,\r\n    })\r\n\r\n    function editItem() {\r\n        values.price = parseInt(values.price)\r\n        values.stock = parseInt(values.stock)\r\n        values.weight = parseInt(values.weight)\r\n        values.length = parseInt(values.length)\r\n        values.width = parseInt(values.width)\r\n        values.height = parseInt(values.height)\r\n        updateItem()\r\n    }\r\n\r\n    const showMessage = () => {\r\n        if (isSaved) {\r\n            console.log(errors)\r\n            if (Object.keys(errors).length > 0) {\r\n                return (<div className='ui error message'>\r\n                    <ul className=\"list\">\r\n                        {Object.values(errors).map(value => (<li key={value}>{value}</li>))}\r\n                    </ul>\r\n                </div>)\r\n            } else {\r\n                return (\r\n                    <div className='ui positive message'>\r\n                        <ul className=\"list\">\r\n                            Updated\r\n                        </ul>\r\n                    </div>\r\n                )\r\n            }\r\n\r\n        } else {\r\n            return <div></div>\r\n        }\r\n    }\r\n\r\n    let postMarkup = (\r\n        <Grid centered stackable>\r\n            <Grid.Column width={12}>\r\n                <Card fluid>\r\n                    <Card.Content header='Item Image' />\r\n                    <Card.Content>\r\n                        <Image\r\n                            rounded\r\n                            src='https://react.semantic-ui.com/images/avatar/large/molly.png'\r\n                            size='small'\r\n                            style={{ marginRight: 5 }}\r\n                        />\r\n                        <Image\r\n                            rounded\r\n                            src='https://react.semantic-ui.com/images/avatar/large/molly.png'\r\n                            size='small'\r\n                            style={{ marginRight: 5 }}\r\n                        />\r\n                        <Image\r\n                            rounded\r\n                            src='https://react.semantic-ui.com/images/avatar/large/molly.png'\r\n                            size='small'\r\n                            style={{ marginRight: 5 }}\r\n                        />\r\n                    </Card.Content>\r\n                    <Card.Content extra>\r\n                        <Button\r\n                            fluid\r\n                            color='standard'\r\n                            size='small'\r\n                        >\r\n                            <Icon name=\"plus\"></Icon>\r\n                            add Image\r\n                            </Button>\r\n                    </Card.Content>\r\n                </Card>\r\n                <Card fluid>\r\n                    <Card.Content header='Item Details' />\r\n                    <Card.Content extra>\r\n                        <Form size='small' onSubmit={onSubmit} noValidate noValidate>\r\n                            <Form.Input\r\n                                fluid\r\n                                placeholder='Item Name'\r\n                                label='Item Name'\r\n                                value={values.name}\r\n                                name=\"name\"\r\n                                onChange={onChange}\r\n                            />\r\n                            <Form.Group inline>\r\n                                <Form.Field\r\n                                    fluid\r\n                                    placeholder='Category'\r\n                                    label='Category'\r\n                                    onChange={onChange}\r\n                                    name=\"category\"\r\n                                    control='select'\r\n                                    value={values.category}\r\n                                >\r\n                                    <option value='-'>-</option>\r\n                                    <option value='sparepart'>Sparepart</option>\r\n                                    <option value='accessories'>Accessories</option>\r\n                                    <option value='apparel'>Apparel</option>\r\n                                </Form.Field>\r\n                                <Form.Field\r\n                                    fluid\r\n                                    placeholder='Condition'\r\n                                    label='Condition'\r\n                                    onChange={onChange}\r\n                                    name=\"condition\"\r\n                                    control='select'\r\n                                    value={values.condition}\r\n                                >\r\n                                    <option value='-'>-</option>\r\n                                    <option value='new'>New</option>\r\n                                    <option value='used'>Used</option>\r\n                                </Form.Field>\r\n                            </Form.Group>\r\n                            <Form.Input\r\n                                fluid\r\n                                iconPosition='left'\r\n                                placeholder='Item Description'\r\n                                label='Description'\r\n                                control={TextArea}\r\n                                value={values.description}\r\n                                name=\"description\"\r\n                                onChange={onChange}\r\n\r\n                            />\r\n                            <Form.Group inline widths='equal'>\r\n                                <Form.Input\r\n                                    fluid\r\n                                    placeholder='Rp'\r\n                                    label='Price'\r\n                                    value={values.price}\r\n                                    name=\"price\"\r\n                                    type=\"number\"\r\n                                    onChange={onChange}\r\n                                    min={1}\r\n                                />\r\n                                <Form.Input\r\n                                    fluid\r\n                                    placeholder='Amount Item'\r\n                                    label='Amount Item'\r\n                                    value={values.stock}\r\n                                    name=\"stock\"\r\n                                    type=\"number\"\r\n                                    onChange={onChange}\r\n                                    max={100}\r\n                                    min={1}\r\n                                />\r\n                            </Form.Group>\r\n                            <Form.Group inline widths='equal'>\r\n                                <Form.Input\r\n                                    fluid\r\n                                    placeholder='kg'\r\n                                    label='Weight'\r\n                                    value={parseInt(values.weight)}\r\n                                    name=\"weight\"\r\n                                    type=\"number\"\r\n                                    onChange={onChange}\r\n                                    max={10}\r\n                                    min={1}\r\n\r\n                                />\r\n                                <Form.Input\r\n                                    fluid\r\n                                    placeholder='cm'\r\n                                    label='Length'\r\n                                    value={values.length}\r\n                                    name=\"length\"\r\n                                    type=\"number\"\r\n                                    onChange={onChange}\r\n                                    max={1000}\r\n                                    min={1}\r\n                                />\r\n                                <Form.Input\r\n                                    fluid\r\n                                    placeholder='cm'\r\n                                    label='Width'\r\n                                    value={values.width}\r\n                                    name=\"width\"\r\n                                    type=\"number\"\r\n                                    max={1000}\r\n                                    min={1}\r\n                                    onChange={onChange}\r\n                                />\r\n                                <Form.Input\r\n                                    fluid\r\n                                    placeholder='cm'\r\n                                    label='Height'\r\n                                    value={values.height}\r\n                                    name=\"height\"\r\n                                    type=\"number\"\r\n                                    onChange={onChange}\r\n                                    max={1000}\r\n                                    min={1}\r\n                                />\r\n                            </Form.Group>\r\n                            <Button\r\n                                fluid\r\n                                color='teal'\r\n                                size='small'\r\n                            >\r\n                                Save Item\r\n                            </Button>\r\n                        </Form>\r\n                        {showMessage()}\r\n                    </Card.Content>\r\n                </Card>\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n\r\n    return postMarkup\r\n}\r\n\r\nconst UPDATE_ITEM_MUTATION = gql`\r\n  mutation updateItem(\r\n    $name: String!\r\n    $price: Int!\r\n    $stock: Int!\r\n    $category: String!\r\n    $condition: String!\r\n    $weight: Int!\r\n    $description: String!\r\n    $length: Int!\r\n    $width: Int!\r\n    $height: Int!\r\n    $itemId: ID!\r\n  ) {\r\n    updateItem(itemId: $itemId, addItemInput:{\r\n        name: $name,\r\n        price: $price,\r\n        stock: $stock,\r\n        category: $category,\r\n        condition: $condition,\r\n        weight: $weight,\r\n        description: $description\r\n        dimension: {\r\n            length: $length,\r\n            width: $width\r\n            height: $height\r\n        },\r\n        images: [{\r\n            downloadUrl:\"\"\r\n        }]\r\n    }){\r\n        id\r\n        name\r\n        price\r\n        stock\r\n        category\r\n        condition\r\n        weight\r\n        description\r\n        dimension {\r\n            length\r\n            width\r\n            height\r\n        }\r\n        images {\r\n            downloadUrl\r\n        }\r\n        createdAt\r\n        bookmarkedBy{\r\n            id\r\n            userId\r\n            createdAt\r\n        }\r\n        user{\r\n            id\r\n            seller{\r\n                username\r\n                avatar\r\n                description\r\n                createdAt\r\n                id\r\n            }\r\n        }\r\n    }\r\n    }\r\n  \r\n`\r\n\r\nconst FETCH_ITEM_QUERY = gql`\r\n  query($itemId: ID!) {\r\n    getItem(itemId: $itemId) {\r\n        id\r\n        name\r\n        price\r\n        stock\r\n        weight\r\n        createdAt\r\n        description\r\n        condition\r\n        category\r\n        dimension{\r\n            length\r\n            width\r\n            height\r\n        }\r\n        images{\r\n            id\r\n            downloadUrl\r\n        }\r\n        bookmarkedBy{\r\n            id\r\n            userId\r\n            createdAt\r\n        }\r\n        user{\r\n            id\r\n            seller{\r\n                id\r\n                username\r\n            }\r\n        }\r\n    }\r\n  }\r\n`\r\n\r\nexport default EditItem\r\n","D:\\SKRIPSI\\gowes\\client\\src\\components\\chat\\ChatFloatingButton.js",["360","361","362"],"import React, { useState, useContext } from 'react';\r\nimport { Icon, Transition, Segment, Grid, Container } from 'semantic-ui-react';\r\nimport { AuthContext } from '../../context/auth';\r\nimport ChatFloatingCard from './ChatFloatingCard';\r\n\r\nfunction ChatFloatingButton({ isChatVisible, onChatVisible }) {\r\n    const [ visible, setVisible ] = useState(true)\r\n    // const toggleVisibility = () => {setVisible(!visible)}\r\n    const toggleVisibility = () => {onChatVisible()}\r\n    const { user } = useContext(AuthContext);\r\n    \r\n    const style = {\r\n        cursor: 'pointer',\r\n        borderRadius: 26,\r\n        margin: 0,\r\n        top: 'auto',\r\n        right: 80,\r\n        bottom: 40,\r\n        left: 'auto',\r\n        position: 'fixed',\r\n        zIndex: 1000,\r\n        paddingRight: 30,\r\n        paddingLeft: 30,\r\n        paddingTop: 10,\r\n        paddingBottom: 10\r\n    };\r\n\r\n    const cardStyle = {\r\n        width:560,\r\n        height:390,\r\n        borderRadius: 12,\r\n        margin: 0,\r\n        top: 'auto',\r\n        right: 80,\r\n        bottom: 40,\r\n        left: 'auto',\r\n        position: 'fixed',\r\n        zIndex: 1000\r\n    };\r\n\r\n    const spanStyle = { fontSize: 14, fontWeight: 'bold'};\r\n\r\n    let chatFloatingMarkup  = (<br/>)\r\n    if (user !== null) {\r\n        chatFloatingMarkup = ( \r\n            <Container>\r\n                <Transition visible={!isChatVisible} animation='scale' duration={500}>\r\n                    <Segment onClick={toggleVisibility} floated=\"right\" raised=\"true\" style={style}>\r\n                        <Icon color=\"teal\" size=\"large\" name=\"discussions\"/>\r\n                        <span style={spanStyle}>Chat</span>\r\n                    </Segment>\r\n                </Transition>\r\n                <Transition visible={isChatVisible} animation='scale' duration={500}>\r\n                    <Segment style={cardStyle}>\r\n                        <ChatFloatingCard onClose={toggleVisibility}/>\r\n                    </Segment>\r\n                </Transition>\r\n            </Container>\r\n            )\r\n    }\r\n    return chatFloatingMarkup;\r\n}\r\nexport default ChatFloatingButton","D:\\SKRIPSI\\gowes\\client\\src\\components\\chat\\ChatFloatingCard.js",["363","364","365","366","367","368"],"import React, { useContext, useState } from \"react\";\r\nimport { useQuery } from \"@apollo/react-hooks\";\r\nimport {\r\n  Icon,\r\n  Grid,\r\n  Segment,\r\n  List,\r\n  Form,\r\n  Image,\r\n  Button,\r\n} from \"semantic-ui-react\";\r\nimport ChatListCard from \"./ChatListCard\";\r\nimport MessageListCard from \"./MessageListCard\";\r\nimport { FETCH_CHATS_QUERY } from \"../../util/graphql\";\r\nimport { AuthContext } from \"../../context/auth\";\r\nimport gql from \"graphql-tag\";\r\nimport { useMutation } from \"@apollo/react-hooks\";\r\nimport { useForm } from \"../../util/hooks\";\r\n\r\nfunction ChatFloatingCard(props) {\r\n  const { user } = useContext(AuthContext);\r\n  const [errors, setErrors] = useState({});\r\n  const { loading, data } = useQuery(FETCH_CHATS_QUERY);\r\n  const { getChats: chats } = data ? data : [];\r\n  const [currentChat, setCurrentChat] = useState({\r\n    id: \"\",\r\n    users: [{ seller: { username: \"\" } }],\r\n  });\r\n  const [content, setContent] = useState(\"\");\r\n\r\n  const setChat = (chat) => setCurrentChat(chat);\r\n\r\n  const receiver = (users) => {\r\n    let userReceiver;\r\n    if (users[0].id != user.id) {\r\n      userReceiver = users[0];\r\n    } else {\r\n      userReceiver = users[1];\r\n    }\r\n    return userReceiver;\r\n  };\r\n\r\n  const topLeftBar = {\r\n    margin: 0,\r\n    borderTopLeftRadius: 12,\r\n    borderTopRightRadius: 0,\r\n    borderBottomLeftRadius: 0,\r\n    borderBottomRightRadius: 0,\r\n  };\r\n\r\n  const topRightBar = {\r\n    margin: 0,\r\n    borderTopLeftRadius: 0,\r\n    borderTopRightRadius: 12,\r\n    borderBottomLeftRadius: 0,\r\n    borderBottomRightRadius: 0,\r\n  };\r\n\r\n  const rightBottomContent = {\r\n    margin: 0,\r\n    padding: 0,\r\n    height: 50,\r\n    borderTopLeftRadius: 0,\r\n    borderTopRightRadius: 0,\r\n    borderBottomLeftRadius: 0,\r\n    borderBottomRightRadius: 12,\r\n  };\r\n\r\n  let obj = { id: 1 };\r\n  let objs = [];\r\n  for (var i = 0; i < 4; i++) {\r\n    objs.push(obj);\r\n  }\r\n\r\n  console.log(currentChat.id);\r\n\r\n  const { onChange, onSubmit, values } = useForm(sendMessage, {\r\n    content: \"\",\r\n  });\r\n\r\n  console.log(values);\r\n\r\n  const [addMessage] = useMutation(ADD_MESSAGE, {\r\n    update(_, { data: { addMessage: message } }) {\r\n      // context.login(userData)\r\n      // props.history.push('/')\r\n      console.log(\"succsess\");\r\n      values.content = \"\";\r\n    },\r\n    onError(err) {\r\n      setErrors(err.graphQLErrors[0].extensions.exception.errors);\r\n      console.log(\"error\");\r\n    },\r\n    variables: {\r\n      chatId: currentChat.id,\r\n      receiverUserId: \"\",\r\n      content: values.content,\r\n    },\r\n  });\r\n\r\n  function sendMessage() {\r\n    addMessage();\r\n    console.log(values);\r\n  }\r\n\r\n  return (\r\n    <Grid>\r\n      <Grid.Column width={5} style={{ padding: 0 }}>\r\n        <Segment style={topLeftBar}>\r\n          <List>\r\n            <List.Item>\r\n              <List.Content style={{ fontWeight: \"bold\" }}>Chat</List.Content>\r\n            </List.Item>\r\n          </List>\r\n        </Segment>\r\n        {!loading ? (\r\n          <ChatListCard chats={chats} user={user} setChat={setChat} />\r\n        ) : (\r\n          <h1>Loading chats..</h1>\r\n        )}\r\n      </Grid.Column>\r\n      <Grid.Column width={11} style={{ padding: 0 }}>\r\n        <Segment style={topRightBar}>\r\n          <Grid>\r\n            <Grid.Column width={14}>\r\n              {currentChat.id != \"\" ? (\r\n                <List horizontal>\r\n                  <List.Item>\r\n                    <Image\r\n                      avatar\r\n                      src=\"https://react.semantic-ui.com/images/avatar/small/tom.jpg\"\r\n                    />\r\n                  </List.Item>\r\n                  <List.Item>\r\n                    {receiver(currentChat.users).seller.username}\r\n                  </List.Item>\r\n                  <List.Item>\r\n                    <span\r\n                      style={{\r\n                        color: \"#20B52B\",\r\n                        backgroundColor: \"#C6ECCD\",\r\n                        paddingTop: 1,\r\n                        paddingBottom: 1,\r\n                        paddingLeft: 3,\r\n                        paddingRight: 3,\r\n                        borderRadius: 6,\r\n                      }}\r\n                    >\r\n                      Seller\r\n                    </span>\r\n                  </List.Item>\r\n                </List>\r\n              ) : (\r\n                <List> </List>\r\n              )}\r\n            </Grid.Column>\r\n            <Grid.Column width={2}>\r\n              <Icon\r\n                size=\"large\"\r\n                name=\"angle down\"\r\n                onClick={props.onClose}\r\n                style={{ cursor: \"pointer\" }}\r\n              />\r\n            </Grid.Column>\r\n          </Grid>\r\n        </Segment>\r\n        {currentChat.id != \"\" ? (\r\n          <MessageListCard user={user} chatId={currentChat.id} />\r\n        ) : (\r\n          <Segment style={{ height: 286, margin: 0 }}></Segment>\r\n        )}\r\n        <Segment style={rightBottomContent}>\r\n          <Form onSubmit={onSubmit}>\r\n            <Form.Group\r\n              style={{\r\n                margin: 0,\r\n                paddingTop: 4,\r\n                paddingLeft: 8,\r\n                paddingRight: 8,\r\n              }}\r\n            >\r\n              <input\r\n                style={{ borderRadius: 50 }}\r\n                width={14}\r\n                placeholder=\"Write Messages...\"\r\n                name=\"content\"\r\n                onChange={onChange}\r\n                value={values.content}\r\n              />\r\n              <Button\r\n                icon=\"send\"\r\n                circular\r\n                color=\"teal\"\r\n                style={{ marginLeft: 8 }}\r\n              />\r\n            </Form.Group>\r\n          </Form>\r\n        </Segment>\r\n      </Grid.Column>\r\n    </Grid>\r\n  );\r\n}\r\n\r\nconst ADD_MESSAGE = gql`\r\n  mutation addMessage($chatId: ID!, $receiverUserId: ID!, $content: String!) {\r\n    addMessage(\r\n      messageInput: {\r\n        chatId: $chatId\r\n        receiverUserId: $receiverUserId\r\n        content: $content\r\n      }\r\n    ) {\r\n      id\r\n      user\r\n      content\r\n      images {\r\n        id\r\n        downloadUrl\r\n      }\r\n      sentAt\r\n    }\r\n  }\r\n`;\r\nexport default ChatFloatingCard;\r\n","D:\\SKRIPSI\\gowes\\client\\src\\pages\\Checkout.js",["369","370"],"import React from 'react';\r\nimport { Grid, Ref, Message, Card } from 'semantic-ui-react';\r\nimport { useQuery } from '@apollo/react-hooks';\r\n\r\nimport CheckoutCard from '../components/CheckoutCard';\r\nimport ItemSummaryCheckout from '../components/ItemSummaryCheckout';\r\nimport { FETCH_USER_CART_QUERY } from '../util/graphql';\r\n\r\n\r\nfunction Checkout() {\r\n    const contextRef = React.createRef();\r\n\r\n    const { loading, data, refetch } = useQuery(FETCH_USER_CART_QUERY)\r\n    let { getUserCartItems: cartItems } = data ? data : []\r\n\r\n    console.log(cartItems)\r\n\r\n    Object.size = function (obj) {\r\n        var size = 0,\r\n            key;\r\n        for (key in obj) {\r\n            if (obj.hasOwnProperty(key)) size++;\r\n        }\r\n        return size;\r\n    };\r\n\r\n    var size = Object.size(cartItems)\r\n\r\n    let cartMarkup = (\r\n        <>\r\n            <br></br>\r\n            <Grid.Column width={16}><h1>Checkout</h1></Grid.Column>\r\n            <>\r\n                <Message\r\n                    error\r\n                    icon='cart'\r\n                    header='You dont have items in cart'\r\n                    content='add items to cart'\r\n                    style={{ marginBottom: 202 }}\r\n                />\r\n            </>\r\n        </>\r\n    )\r\n    if (!loading) {\r\n        if (size > 0) {\r\n            let group = cartItems.reduce((r, a) => {\r\n                r[a.item.user.id] = [...r[a.item.user.id] || [], a];\r\n                return r;\r\n            }, {});\r\n            console.log(group)\r\n\r\n            Object.keys(group).map(function (key, index) {\r\n                console.log(group[key])\r\n            })\r\n            cartMarkup = (\r\n                <Ref innerRef={contextRef}>\r\n                    <Grid stackable>\r\n                        <Grid.Column width={16}><h2>Checkout</h2></Grid.Column>\r\n                        <Grid.Column width={12} >\r\n                            <h3>Shipping Address</h3>\r\n                            <Card fluid color=\"teal\">\r\n                                <Card.Content>\r\n                                    <h4>Muhammad Gebby Geovany</h4>\r\n                                    <div>081809195559</div>\r\n                                    <p>komplek pasanggrahan indah blok 17 no.8 Ujungberung, Kota Bandung, 40617</p>\r\n                                </Card.Content>\r\n                            </Card>\r\n                            <h3>Items</h3>\r\n                            {group &&\r\n                                Object.keys(group).map((key, index) =>\r\n                                (\r\n                                    <CheckoutCard cartItem={group[key]}></CheckoutCard>\r\n                                )\r\n                                )\r\n                            }\r\n                        </Grid.Column>\r\n                        <Grid.Column width={4}>\r\n                            <ItemSummaryCheckout contextRef={contextRef}></ItemSummaryCheckout>\r\n                        </Grid.Column>\r\n                    </Grid>\r\n                </Ref>\r\n            )\r\n        }\r\n\r\n\r\n    }\r\n    return cartMarkup\r\n}\r\n\r\nexport default Checkout;","D:\\SKRIPSI\\gowes\\client\\src\\components\\ItemSummaryCheckout.js",["371"],"import React, { useState } from 'react';\r\nimport { Card, Sticky, Dropdown, Divider, Button, List, Header } from 'semantic-ui-react';\r\nimport { Link } from 'react-router-dom'\r\n\r\n\r\nfunction ItemSummaryCheckout({ contextRef }) {\r\n\r\n    const options = [\r\n        {\r\n            key: 1,\r\n            text: 'J&t REG',\r\n            value: 1,\r\n            content: (\r\n                <>\r\n                    <Header as='h4'>J&t REG</Header>\r\n                    <span>Rp10.000</span>\r\n                </>\r\n            ),\r\n        },\r\n        {\r\n            key: 2,\r\n            text: 'Si Cepat Halu',\r\n            value: 2,\r\n            content: (\r\n                <>\r\n                    <Header as='h4'>Si Cepat Halu</Header>\r\n                    <span>$10.99</span>\r\n                </>\r\n            ),\r\n        },\r\n        {\r\n            key: 3,\r\n            text: 'Anter Aja',\r\n            value: 3,\r\n            content: (\r\n                <>\r\n                    <Header as='h4'>Anter Aja</Header>\r\n                    <span>$10.99</span>\r\n                </>\r\n            ),\r\n        },\r\n    ]\r\n\r\n\r\n    return (\r\n        <Sticky context={contextRef} offset={130}>\r\n            <Card fluid style={{ boxShadow: '0px 3px 5px rgba(0, 0, 0, 0.2)' }}>\r\n                <Card.Content header=\"Shipping\" />\r\n                <Card.Content>\r\n                    <Dropdown selection fluid options={options} placeholder='Shipment' />\r\n                </Card.Content>\r\n            </Card>\r\n            <Card fluid style={{ boxShadow: '0px 3px 5px rgba(0, 0, 0, 0.2)' }}>\r\n                <Card.Content header=\"Shopping Summary\" />\r\n                <Card.Content>\r\n                    <List divided verticalAlign='middle'>\r\n                        <List.Item>\r\n                            <List.Content floated='right'>Rp100.000</List.Content>\r\n                            <List.Content style={{ marginBottom: 5 }}>Item (x2)</List.Content>\r\n                            <List.Content floated='right'>10.000</List.Content>\r\n                            <List.Content style={{ marginBottom: 5 }}>Shipping Cost</List.Content>\r\n                        </List.Item>\r\n                    </List>\r\n                    <Divider />\r\n                    <List divided verticalAlign='middle'>\r\n                        <List.Item>\r\n                            <List.Content floated='right'>Rp200.000</List.Content>\r\n                            <List.Content style={{ marginBottom: 5 }}><h4>Sub Total</h4></List.Content>\r\n                        </List.Item>\r\n                    </List>\r\n                </Card.Content>\r\n                <Card.Content extra>\r\n                    <Button fluid color=\"teal\" as={Link} to=\"/checkout\">Pay</Button>\r\n                </Card.Content>\r\n            </Card>\r\n        </Sticky>\r\n    )\r\n}\r\nexport default ItemSummaryCheckout","D:\\SKRIPSI\\gowes\\client\\src\\components\\CheckoutCard.js",["372","373"],"import React from 'react';\r\nimport { Card, Checkbox } from 'semantic-ui-react';\r\nimport gql from 'graphql-tag'\r\nimport ItemCheckoutCard from './ItemCheckoutCard';\r\n\r\n\r\nfunction CheckoutCard({ cartItem }) {\r\n\r\n    console.log(cartItem)\r\n\r\n\r\n    // console.log(id)\r\n\r\n    return (\r\n        <Card fluid style={{ boxShadow: '0px 3px 5px rgba(0, 0, 0, 0.2)' }}>\r\n            <Card.Content>\r\n                <h4>{cartItem[0].item.user.seller.username}</h4>\r\n            </Card.Content>\r\n            {cartItem &&\r\n                cartItem.map((item) => (\r\n                    <ItemCheckoutCard item={item}></ItemCheckoutCard>\r\n                ))}\r\n        </Card>\r\n    );\r\n}\r\n\r\nconst DELETE_CART_ITEM_MUTATION = gql`\r\n    mutation deleteCartItem($cartId:ID!){\r\n        deleteCartItem(cartId: $cartId)\r\n    }\r\n`\r\n\r\nexport default CheckoutCard;","D:\\SKRIPSI\\gowes\\client\\src\\components\\ItemCheckoutCard.js",["374","375","376","377","378","379","380","381","382","383","384"],"import React, { useState } from 'react';\r\nimport { Card, Grid, Form, Checkbox, Image, Button, Icon, List, Input } from 'semantic-ui-react';\r\nimport gql from 'graphql-tag'\r\nimport { useMutation } from '@apollo/react-hooks'\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nimport { FETCH_USER_CART_QUERY } from '../util/graphql';\r\n\r\nfunction ItemCheckoutCard({ item }) {\r\n\r\n    const [amountItem, setAmountItem] = useState(item.amountItem)\r\n    const [errors, setErrors] = useState({})\r\n\r\n    console.log(item.item.stock)\r\n\r\n    console.log(item.name)\r\n\r\n    const [deleteItemCart] = useMutation(DELETE_CART_ITEM_MUTATION, {\r\n        update(proxy, result) {\r\n            // TODO: remove post cache\r\n            const data = proxy.readQuery({\r\n                query: FETCH_USER_CART_QUERY\r\n            })\r\n            proxy.writeQuery({\r\n                query: FETCH_USER_CART_QUERY,\r\n                data: {\r\n                    getUserCartItems: data.getUserCartItems.filter(cart => cart.id !== item.id)\r\n                }\r\n            })\r\n        },\r\n        variables: { cartId: item.id }\r\n    })\r\n\r\n\r\n    return (\r\n        <>\r\n            <Card.Content>\r\n                <Grid doubling>\r\n                    <Grid.Column width={2} verticalAlign=\"middle\" style={{ padding: 5, marginLeft: 10 }} >\r\n                        <Image\r\n                            fluid\r\n                            centered\r\n                            rounded\r\n                            src='https://react.semantic-ui.com/images/avatar/large/molly.png'\r\n                            size='small'\r\n                            as={Link} to={`/items/${item.item.id}`}\r\n                        />\r\n                    </Grid.Column>\r\n                    <Grid.Column width={13} style={{ marginTop: 5 }}>\r\n                        <Grid.Row><h4 >{item.item.name}</h4></Grid.Row>\r\n                        <Grid.Row style={{ marginTop: 5 }}>\r\n                            <h4 style={{ color: 'teal' }}>Rp{item.item.price}</h4>\r\n                        </Grid.Row>\r\n                        <Grid.Row style={{ marginTop: 5 }}>\r\n                           <div>2 item (10gr) </div>\r\n                        </Grid.Row>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Card.Content>\r\n        </>\r\n    );\r\n}\r\nconst DELETE_CART_ITEM_MUTATION = gql`\r\n    mutation deleteCartItem($cartId:ID!){\r\n        deleteCartItem(cartId: $cartId)\r\n    }\r\n`\r\nexport default ItemCheckoutCard;","D:\\SKRIPSI\\gowes\\client\\src\\pages\\Authentication\\Register.js",["385"],"import React, { useContext, useState } from 'react'\r\nimport { Button, Form, Grid, Header, Segment, Message } from 'semantic-ui-react'\r\nimport gql from 'graphql-tag'\r\nimport { useMutation } from '@apollo/react-hooks'\r\n\r\nimport { AuthContext } from '../../context/auth'\r\nimport { useForm } from '../../util/hooks'\r\n\r\nfunction Register(props) {\r\n    const context = useContext(AuthContext)\r\n    const [errors, setErrors] = useState({})\r\n\r\n    const { onChange, onSubmit, values } = useForm(registerUser, {\r\n        name: '',\r\n        password: '',\r\n        confirmPassword: '',\r\n        email: '',\r\n    })\r\n\r\n    const [addUser, { loading }] = useMutation(REGISTER_USER, {\r\n        update(_, { data: { register: userData } }) {\r\n            context.login(userData)\r\n            props.history.push('/')\r\n        },\r\n        onError(err) {\r\n            setErrors(err.graphQLErrors[0].extensions.exception.errors);\r\n        },\r\n        variables: values\r\n    })\r\n\r\n    function registerUser() {\r\n        addUser()\r\n    }\r\n\r\n    return (\r\n        <Grid textAlign='center' style={{ height: '100vh', marginTop: 100 }}>\r\n            <Grid.Column style={{ maxWidth: 450 }}>\r\n                <Header color='standard' textAlign='center'>\r\n                    <span className=\"logoLogin\">Register account</span>\r\n                </Header>\r\n                <Form size='large' onSubmit={onSubmit} noValidate className={loading ? \"loading\" : \"\"}>\r\n                    <Segment style={{ boxShadow: '0px 3px 5px rgba(0, 0, 0, 0.2)' }}>\r\n                        <Form.Input\r\n                            fluid\r\n                            icon='mail'\r\n                            iconPosition='left'\r\n                            placeholder='Email'\r\n                            name=\"email\"\r\n                            value={values.email}\r\n                            error={errors.email ? true : false}\r\n                            onChange={onChange}\r\n                        />\r\n                        <Form.Input\r\n                            fluid\r\n                            icon='user'\r\n                            iconPosition='left'\r\n                            placeholder='Name'\r\n                            name=\"name\"\r\n                            value={values.name}\r\n                            error={errors.name ? true : false}\r\n                            onChange={onChange}\r\n                        />\r\n                        <Form.Input\r\n                            fluid\r\n                            icon='lock'\r\n                            iconPosition='left'\r\n                            placeholder='Password'\r\n                            type='password'\r\n                            name=\"password\"\r\n                            value={values.password}\r\n                            error={errors.password ? true : false}\r\n                            onChange={onChange}\r\n                        />\r\n                        <Form.Input\r\n                            fluid\r\n                            icon='lock'\r\n                            iconPosition='left'\r\n                            placeholder='Confirm Password'\r\n                            type='password'\r\n                            name=\"confirmPassword\"\r\n                            value={values.confirmPassword}\r\n                            error={errors.confirmPassword ? true : false}\r\n                            onChange={onChange}\r\n                        />\r\n\r\n                        <Button color='secondary' fluid size='large'>\r\n                            Register\r\n                        </Button>\r\n                    </Segment>\r\n                </Form>\r\n                {Object.keys(errors).length > 0 && (\r\n                    <div className='ui error message'>\r\n                        <ul className=\"list\">\r\n                            {Object.values(errors).map(value => (\r\n                                <li key={value}>{value}</li>\r\n                            ))}\r\n                        </ul>\r\n                    </div>\r\n                )}\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nconst REGISTER_USER = gql`\r\n  mutation register(\r\n    $name: String!\r\n    $email: String!\r\n    $password: String!\r\n    $confirmPassword: String!\r\n  ) {\r\n    register(\r\n      registerInput: {\r\n        name: $name\r\n        email: $email\r\n        password: $password\r\n        confirmPassword: $confirmPassword\r\n      }\r\n    ) {\r\n        id\r\n        email\r\n        token\r\n    }\r\n  }\r\n`\r\n\r\nexport default Register;","D:\\SKRIPSI\\gowes\\client\\src\\pages\\Authentication\\Login.js",[],"D:\\SKRIPSI\\gowes\\client\\src\\components\\chat\\MessageListCard.js",["386","387","388","389"],"import React, { useEffect, useRef } from \"react\";\r\nimport { Grid, Segment } from \"semantic-ui-react\";\r\nimport {\r\n  FETCH_CHAT_MESSAGES_QUERY,\r\n  MESSAGES_SUBSCRIPTION,\r\n} from \"../../util/graphql\";\r\nimport { useQuery, useSubscription } from \"@apollo/react-hooks\";\r\nimport ItemAttachedOnChat from \"./ItemAttachedOnChat\";\r\n\r\n\r\nfunction MessageListCard({ user, chatId }) {\r\n  const { loading, data, subscribeToMore, refetch } = useQuery(\r\n    FETCH_CHAT_MESSAGES_QUERY,\r\n    {\r\n      variables: {\r\n        chatId: chatId,\r\n      },\r\n    }\r\n  );\r\n  const { getMessages: messages } = data ? data : [];\r\n  const messagesEndRef = useRef(null);\r\n  const scrollToBottom = () => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" })\r\n  }\r\n\r\n  let count = 0;\r\n  if (!loading) {\r\n    subscribeToMore({\r\n      document: MESSAGES_SUBSCRIPTION,\r\n      variables: { chatId: chatId },\r\n      updateQuery: (prev, { subscriptionData }) => {\r\n        if (!subscriptionData.data) {\r\n          console.log(\r\n            `onMessagesSub@updateQuery: not update ${prev.getMessages[0].content}`\r\n          );\r\n          return prev;\r\n        }\r\n        count++\r\n        const newMessageItem = subscriptionData.data.newMessage;\r\n        console.log(`newMessageItem: ${newMessageItem.content}`);\r\n        const messages = prev.getMessages.concat(newMessageItem);\r\n        console.log(`count: ${count}`)\r\n        return {\r\n          getMessages: messages,\r\n        };\r\n      },\r\n      onError: (err) => console.error(err),\r\n    });\r\n  }\r\n  useEffect(() => {\r\n    scrollToBottom()\r\n  }, [messages]);\r\n\r\n  const getMessageItem = (message, position, style) => (\r\n    <Grid container key={message.id}>\r\n      <Grid.Column style={{ padding: 0 }}>\r\n        <Segment\r\n          compact\r\n          floated={position}\r\n          // inverted\r\n          // color=\"green\"\r\n          style={style}\r\n        >\r\n          {message.content}\r\n        </Segment>\r\n      </Grid.Column>\r\n    </Grid>\r\n  );\r\n\r\n  let lastMessageId = \"\";\r\n  const getMessageComp = (message, index) => {\r\n    let messageItemMarkUp;\r\n    // fixing duplication message problem\r\n    if (message.id !== lastMessageId) {\r\n      lastMessageId = message.id;\r\n      \r\n      if (message.item) {\r\n        \r\n      }\r\n\r\n      if (message.user != user.id) {\r\n        // left message item comp\r\n        messageItemMarkUp = getMessageItem(message, \"left\", messageItemLeft)\r\n      } else {\r\n        // right message item comp\r\n        messageItemMarkUp = getMessageItem(message, \"right\", messageItemRight)\r\n      }\r\n    }\r\n    return messageItemMarkUp;\r\n  };\r\n\r\n  const messageItemLeft = {\r\n    marginTop: 4,\r\n    border: 0,\r\n    marginBottom: 4,\r\n    marginLeft: 14,\r\n    marginRight: 14,\r\n    padding: 10,\r\n    borderTopLeftRadius: 0,\r\n    borderTopRightRadius: 16,\r\n    borderBottomLeftRadius: 16,\r\n    borderBottomRightRadius: 16,\r\n    boxShadow: '0px 3px 5px rgba(0, 0, 0, 0.2)'\r\n  };\r\n  const messageItemRight = {\r\n    marginTop: 4,\r\n    border: 0,\r\n    marginBottom: 4,\r\n    marginLeft: 14,\r\n    padding: 10,\r\n    borderTopLeftRadius: 16,\r\n    borderTopRightRadius: 0,\r\n    borderBottomLeftRadius: 16,\r\n    borderBottomRightRadius: 16,\r\n    boxShadow: '0px 3px 5px rgba(0, 0, 0, 0.2)'\r\n  };\r\n  const rightContent = {\r\n    paddingTop: 16,\r\n    paddingBottom: 16,\r\n    paddingLeft: 0,\r\n    paddingRight: 0,\r\n    margin: 0,\r\n    overflow: \"auto\",\r\n    maxHeight: 275,\r\n    height: 275,\r\n    borderTopLeftRadius: 0,\r\n    borderTopRightRadius: 0,\r\n    borderBottomLeftRadius: 0,\r\n    borderBottomRightRadius: 0,\r\n  };\r\n  let messageListMarkup;\r\n  if (!loading) {\r\n    messageListMarkup = (\r\n      <Segment style={rightContent}>\r\n        {messages.map((message, index) => getMessageComp(message, index))}\r\n        {/* <ItemAttachedOnChat></ItemAttachedOnChat> */}\r\n        <div ref={messagesEndRef} />\r\n      </Segment>\r\n    );\r\n  } else {\r\n    messageListMarkup = <h4>Loading messages..</h4>;\r\n  }\r\n\r\n  return messageListMarkup;\r\n}\r\nexport default MessageListCard;\r\n","D:\\SKRIPSI\\gowes\\client\\src\\components\\chat\\ChatListCard.js",["390","391"],"import React, { useState } from \"react\";\r\nimport { List, Image, Segment } from \"semantic-ui-react\";\r\n\r\nfunction ChatListCard({ chats, user, setChat }) {\r\n  let obj = { id: 1 };\r\n  let objs = [];\r\n  for (var i = 0; i < 10; i++) {\r\n    objs.push(obj);\r\n  }\r\n  const [isItemHovered, setItemHovered] = useState({\r\n    state: false,\r\n    id: -1,\r\n  });\r\n  const onMouseEnterItem = {\r\n    backgroundColor: \"#F3F4F5\",\r\n    padding: 8,\r\n    cursor: \"pointer\",\r\n  };\r\n  const onMouseLeaveItem = {\r\n    backgroundColor: \"#FFFFFF\",\r\n    padding: 8,\r\n  };\r\n  const leftContent = {\r\n    padding: 0,\r\n    margin: 0,\r\n    overflow: \"auto\",\r\n    maxHeight: 342,\r\n    height: 342,\r\n    borderTopLeftRadius: 0,\r\n    borderTopRightRadius: 0,\r\n    borderBottomLeftRadius: 12,\r\n    borderBottomRightRadius: 0,\r\n  };\r\n\r\n  const receiver = (users) => {\r\n    let userReceiver;\r\n    if (users[0].id != user.id) {\r\n      userReceiver = users[0];\r\n    } else {\r\n      userReceiver = users[1];\r\n    }\r\n    return userReceiver;\r\n  };\r\n\r\n  const handleItemHovered = (id, state) => {\r\n    setItemHovered({\r\n      state: state,\r\n      id: id,\r\n    });\r\n  };\r\n  return (\r\n    <Segment style={leftContent}>\r\n      <List>\r\n        {chats.map((chat, index) => (\r\n          <List.Item\r\n            key={index}\r\n            onClick={() => setChat(chat)}\r\n            onMouseEnter={() => handleItemHovered(index, true)}\r\n            onMouseLeave={() => handleItemHovered(index, false)}\r\n            style={\r\n              isItemHovered.state && isItemHovered.id == index\r\n                ? onMouseEnterItem\r\n                : onMouseLeaveItem\r\n            }\r\n          >\r\n            <Image\r\n              avatar\r\n              src=\"https://react.semantic-ui.com/images/avatar/small/tom.jpg\"\r\n            />\r\n            <List.Content>\r\n              <List.Header>{receiver(chat.users).seller.username}</List.Header>\r\n              <span\r\n                style={{\r\n                  color: \"#20B52B\",\r\n                  backgroundColor: \"#C6ECCD\",\r\n                  paddingTop: 1,\r\n                  paddingBottom: 1,\r\n                  paddingLeft: 3,\r\n                  paddingRight: 3,\r\n                  borderRadius: 6,\r\n                }}\r\n              >\r\n                Seller\r\n              </span>\r\n            </List.Content>\r\n          </List.Item>\r\n        ))}\r\n      </List>\r\n    </Segment>\r\n  );\r\n}\r\nexport default ChatListCard;\r\n","D:\\SKRIPSI\\gowes\\client\\src\\components\\chat\\ItemAttachedOnChat.js",[],{"ruleId":"392","replacedBy":"393"},{"ruleId":"394","replacedBy":"395"},{"ruleId":"396","severity":1,"message":"397","line":12,"column":11,"nodeType":"398","messageId":"399","endLine":12,"endColumn":15},{"ruleId":"396","severity":1,"message":"400","line":13,"column":26,"nodeType":"398","messageId":"399","endLine":13,"endColumn":33},{"ruleId":"396","severity":1,"message":"401","line":2,"column":44,"nodeType":"398","messageId":"399","endLine":2,"endColumn":49},{"ruleId":"396","severity":1,"message":"401","line":4,"column":33,"nodeType":"398","messageId":"399","endLine":4,"endColumn":38},{"ruleId":"396","severity":1,"message":"401","line":5,"column":31,"nodeType":"398","messageId":"399","endLine":5,"endColumn":36},{"ruleId":"396","severity":1,"message":"402","line":2,"column":56,"nodeType":"398","messageId":"399","endLine":2,"endColumn":61},{"ruleId":"396","severity":1,"message":"403","line":31,"column":11,"nodeType":"398","messageId":"399","endLine":31,"endColumn":26},{"ruleId":"396","severity":1,"message":"404","line":22,"column":12,"nodeType":"398","messageId":"399","endLine":22,"endColumn":18},{"ruleId":"396","severity":1,"message":"405","line":2,"column":30,"nodeType":"398","messageId":"399","endLine":2,"endColumn":40},{"ruleId":"396","severity":1,"message":"400","line":13,"column":26,"nodeType":"398","messageId":"399","endLine":13,"endColumn":33},{"ruleId":"406","severity":1,"message":"407","line":52,"column":30,"nodeType":"408","messageId":"409","endLine":52,"endColumn":39},{"ruleId":"396","severity":1,"message":"397","line":10,"column":11,"nodeType":"398","messageId":"399","endLine":10,"endColumn":15},{"ruleId":"410","severity":1,"message":"411","line":20,"column":30,"nodeType":"412","messageId":"413","endLine":20,"endColumn":32},{"ruleId":"396","severity":1,"message":"414","line":12,"column":20,"nodeType":"398","messageId":"399","endLine":12,"endColumn":31},{"ruleId":"396","severity":1,"message":"415","line":2,"column":28,"nodeType":"398","messageId":"399","endLine":2,"endColumn":44},{"ruleId":"396","severity":1,"message":"416","line":4,"column":21,"nodeType":"398","messageId":"399","endLine":4,"endColumn":25},{"ruleId":"396","severity":1,"message":"417","line":21,"column":11,"nodeType":"398","messageId":"399","endLine":21,"endColumn":18},{"ruleId":"418","severity":1,"message":"419","line":62,"column":33,"nodeType":"420","messageId":"413","endLine":62,"endColumn":36},{"ruleId":"396","severity":1,"message":"421","line":45,"column":9,"nodeType":"398","messageId":"399","endLine":45,"endColumn":16},{"ruleId":"418","severity":1,"message":"419","line":120,"column":25,"nodeType":"420","messageId":"413","endLine":120,"endColumn":28},{"ruleId":"396","severity":1,"message":"422","line":462,"column":7,"nodeType":"398","messageId":"399","endLine":462,"endColumn":25},{"ruleId":"396","severity":1,"message":"423","line":2,"column":45,"nodeType":"398","messageId":"399","endLine":2,"endColumn":50},{"ruleId":"396","severity":1,"message":"397","line":9,"column":13,"nodeType":"398","messageId":"399","endLine":9,"endColumn":17},{"ruleId":"396","severity":1,"message":"424","line":1,"column":17,"nodeType":"398","messageId":"399","endLine":1,"endColumn":27},{"ruleId":"396","severity":1,"message":"425","line":6,"column":10,"nodeType":"398","messageId":"399","endLine":6,"endColumn":21},{"ruleId":"426","severity":1,"message":"427","line":119,"column":112,"nodeType":"428","endLine":119,"endColumn":122},{"ruleId":"396","severity":1,"message":"404","line":15,"column":12,"nodeType":"398","messageId":"399","endLine":15,"endColumn":18},{"ruleId":"396","severity":1,"message":"400","line":51,"column":42,"nodeType":"398","messageId":"399","endLine":51,"endColumn":49},{"ruleId":"426","severity":1,"message":"427","line":41,"column":25,"nodeType":"428","endLine":41,"endColumn":34},{"ruleId":"396","severity":1,"message":"429","line":2,"column":35,"nodeType":"398","messageId":"399","endLine":2,"endColumn":40},{"ruleId":"396","severity":1,"message":"430","line":30,"column":7,"nodeType":"398","messageId":"399","endLine":30,"endColumn":32},{"ruleId":"396","severity":1,"message":"431","line":2,"column":28,"nodeType":"398","messageId":"399","endLine":2,"endColumn":36},{"ruleId":"396","severity":1,"message":"404","line":13,"column":12,"nodeType":"398","messageId":"399","endLine":13,"endColumn":18},{"ruleId":"396","severity":1,"message":"432","line":13,"column":20,"nodeType":"398","messageId":"399","endLine":13,"endColumn":29},{"ruleId":"426","severity":1,"message":"427","line":79,"column":49,"nodeType":"428","endLine":79,"endColumn":75},{"ruleId":"396","severity":1,"message":"433","line":1,"column":17,"nodeType":"398","messageId":"399","endLine":1,"endColumn":25},{"ruleId":"396","severity":1,"message":"434","line":2,"column":24,"nodeType":"398","messageId":"399","endLine":2,"endColumn":28},{"ruleId":"396","severity":1,"message":"435","line":2,"column":38,"nodeType":"398","messageId":"399","endLine":2,"endColumn":46},{"ruleId":"396","severity":1,"message":"436","line":2,"column":54,"nodeType":"398","messageId":"399","endLine":2,"endColumn":58},{"ruleId":"396","severity":1,"message":"437","line":6,"column":12,"nodeType":"398","messageId":"399","endLine":6,"endColumn":22},{"ruleId":"396","severity":1,"message":"438","line":6,"column":24,"nodeType":"398","messageId":"399","endLine":6,"endColumn":37},{"ruleId":"396","severity":1,"message":"439","line":7,"column":11,"nodeType":"398","messageId":"399","endLine":7,"endColumn":24},{"ruleId":"396","severity":1,"message":"440","line":22,"column":11,"nodeType":"398","messageId":"399","endLine":22,"endColumn":22},{"ruleId":"396","severity":1,"message":"441","line":3,"column":10,"nodeType":"398","messageId":"399","endLine":3,"endColumn":14},{"ruleId":"396","severity":1,"message":"442","line":3,"column":16,"nodeType":"398","messageId":"399","endLine":3,"endColumn":26},{"ruleId":"396","severity":1,"message":"433","line":1,"column":17,"nodeType":"398","messageId":"399","endLine":1,"endColumn":25},{"ruleId":"396","severity":1,"message":"433","line":1,"column":17,"nodeType":"398","messageId":"399","endLine":1,"endColumn":25},{"ruleId":"396","severity":1,"message":"443","line":2,"column":59,"nodeType":"398","messageId":"399","endLine":2,"endColumn":66},{"ruleId":"396","severity":1,"message":"444","line":15,"column":12,"nodeType":"398","messageId":"399","endLine":15,"endColumn":19},{"ruleId":"396","severity":1,"message":"404","line":16,"column":12,"nodeType":"398","messageId":"399","endLine":16,"endColumn":18},{"ruleId":"396","severity":1,"message":"432","line":16,"column":20,"nodeType":"398","messageId":"399","endLine":16,"endColumn":29},{"ruleId":"396","severity":1,"message":"445","line":18,"column":11,"nodeType":"398","messageId":"399","endLine":18,"endColumn":24},{"ruleId":"396","severity":1,"message":"417","line":20,"column":13,"nodeType":"398","messageId":"399","endLine":20,"endColumn":20},{"ruleId":"396","severity":1,"message":"400","line":20,"column":42,"nodeType":"398","messageId":"399","endLine":20,"endColumn":49},{"ruleId":"396","severity":1,"message":"401","line":4,"column":33,"nodeType":"398","messageId":"399","endLine":4,"endColumn":38},{"ruleId":"396","severity":1,"message":"446","line":6,"column":10,"nodeType":"398","messageId":"399","endLine":6,"endColumn":27},{"ruleId":"396","severity":1,"message":"417","line":15,"column":13,"nodeType":"398","messageId":"399","endLine":15,"endColumn":20},{"ruleId":"418","severity":1,"message":"419","line":51,"column":24,"nodeType":"420","messageId":"413","endLine":51,"endColumn":27},{"ruleId":"426","severity":1,"message":"427","line":141,"column":75,"nodeType":"428","endLine":141,"endColumn":85},{"ruleId":"396","severity":1,"message":"447","line":346,"column":7,"nodeType":"398","messageId":"399","endLine":346,"endColumn":23},{"ruleId":"396","severity":1,"message":"434","line":2,"column":37,"nodeType":"398","messageId":"399","endLine":2,"endColumn":41},{"ruleId":"396","severity":1,"message":"444","line":7,"column":13,"nodeType":"398","messageId":"399","endLine":7,"endColumn":20},{"ruleId":"396","severity":1,"message":"448","line":7,"column":22,"nodeType":"398","messageId":"399","endLine":7,"endColumn":32},{"ruleId":"396","severity":1,"message":"404","line":22,"column":10,"nodeType":"398","messageId":"399","endLine":22,"endColumn":16},{"ruleId":"396","severity":1,"message":"449","line":29,"column":10,"nodeType":"398","messageId":"399","endLine":29,"endColumn":17},{"ruleId":"396","severity":1,"message":"450","line":29,"column":19,"nodeType":"398","messageId":"399","endLine":29,"endColumn":29},{"ruleId":"410","severity":1,"message":"451","line":35,"column":21,"nodeType":"412","messageId":"413","endLine":35,"endColumn":23},{"ruleId":"410","severity":1,"message":"451","line":126,"column":31,"nodeType":"412","messageId":"413","endLine":126,"endColumn":33},{"ruleId":"410","severity":1,"message":"451","line":167,"column":25,"nodeType":"412","messageId":"413","endLine":167,"endColumn":27},{"ruleId":"396","severity":1,"message":"400","line":13,"column":28,"nodeType":"398","messageId":"399","endLine":13,"endColumn":35},{"ruleId":"406","severity":1,"message":"407","line":52,"column":36,"nodeType":"408","messageId":"409","endLine":52,"endColumn":45},{"ruleId":"396","severity":1,"message":"433","line":1,"column":17,"nodeType":"398","messageId":"399","endLine":1,"endColumn":25},{"ruleId":"396","severity":1,"message":"431","line":2,"column":16,"nodeType":"398","messageId":"399","endLine":2,"endColumn":24},{"ruleId":"396","severity":1,"message":"430","line":27,"column":7,"nodeType":"398","messageId":"399","endLine":27,"endColumn":32},{"ruleId":"396","severity":1,"message":"452","line":2,"column":22,"nodeType":"398","messageId":"399","endLine":2,"endColumn":26},{"ruleId":"396","severity":1,"message":"431","line":2,"column":28,"nodeType":"398","messageId":"399","endLine":2,"endColumn":36},{"ruleId":"396","severity":1,"message":"453","line":2,"column":45,"nodeType":"398","messageId":"399","endLine":2,"endColumn":51},{"ruleId":"396","severity":1,"message":"454","line":2,"column":53,"nodeType":"398","messageId":"399","endLine":2,"endColumn":57},{"ruleId":"396","severity":1,"message":"455","line":2,"column":59,"nodeType":"398","messageId":"399","endLine":2,"endColumn":63},{"ruleId":"396","severity":1,"message":"402","line":2,"column":65,"nodeType":"398","messageId":"399","endLine":2,"endColumn":70},{"ruleId":"396","severity":1,"message":"437","line":12,"column":12,"nodeType":"398","messageId":"399","endLine":12,"endColumn":22},{"ruleId":"396","severity":1,"message":"438","line":12,"column":24,"nodeType":"398","messageId":"399","endLine":12,"endColumn":37},{"ruleId":"396","severity":1,"message":"404","line":13,"column":12,"nodeType":"398","messageId":"399","endLine":13,"endColumn":18},{"ruleId":"396","severity":1,"message":"432","line":13,"column":20,"nodeType":"398","messageId":"399","endLine":13,"endColumn":29},{"ruleId":"396","severity":1,"message":"456","line":19,"column":12,"nodeType":"398","messageId":"399","endLine":19,"endColumn":26},{"ruleId":"396","severity":1,"message":"443","line":2,"column":47,"nodeType":"398","messageId":"399","endLine":2,"endColumn":54},{"ruleId":"396","severity":1,"message":"457","line":7,"column":20,"nodeType":"398","messageId":"399","endLine":7,"endColumn":35},{"ruleId":"396","severity":1,"message":"458","line":8,"column":8,"nodeType":"398","messageId":"399","endLine":8,"endColumn":26},{"ruleId":"396","severity":1,"message":"400","line":12,"column":43,"nodeType":"398","messageId":"399","endLine":12,"endColumn":50},{"ruleId":"410","severity":1,"message":"451","line":81,"column":24,"nodeType":"412","messageId":"413","endLine":81,"endColumn":26},{"ruleId":"410","severity":1,"message":"451","line":37,"column":21,"nodeType":"412","messageId":"413","endLine":37,"endColumn":23},{"ruleId":"410","severity":1,"message":"411","line":61,"column":55,"nodeType":"412","messageId":"413","endLine":61,"endColumn":57},"no-native-reassign",["459"],"no-negated-in-lhs",["460"],"no-unused-vars","'user' is assigned a value but never used.","Identifier","unusedVar","'refetch' is assigned a value but never used.","'Popup' is defined but never used.","'Input' is defined but never used.","'handleItemHover' is assigned a value but never used.","'errors' is assigned a value but never used.","'Transition' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from function.","FunctionExpression","expectedInside","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'useMutation' is defined but never used.","'FETCH_CART_QUERY' is defined but never used.","'Rail' is defined but never used.","'loading' is assigned a value but never used.","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","'options' is assigned a value but never used.","'FETCH_CITIES_QUERY' is assigned a value but never used.","'Image' is defined but never used.","'useContext' is defined but never used.","'AuthContext' is defined but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'Label' is defined but never used.","'DELETE_CART_ITEM_MUTATION' is assigned a value but never used.","'Checkbox' is defined but never used.","'setErrors' is assigned a value but never used.","'useState' is defined but never used.","'Grid' is defined but never used.","'Progress' is defined but never used.","'Item' is defined but never used.","'amountItem' is assigned a value but never used.","'setAmountItem' is assigned a value but never used.","'progressStyle' is assigned a value but never used.","'labelStyles' is assigned a value but never used.","'Link' is defined but never used.","'useHistory' is defined but never used.","'Message' is defined but never used.","'visible' is assigned a value but never used.","'handleDismiss' is assigned a value but never used.","'FETCH_POSTS_QUERY' is defined but never used.","'FETCH_ITEM_QUERY' is assigned a value but never used.","'setVisible' is assigned a value but never used.","'content' is assigned a value but never used.","'setContent' is assigned a value but never used.","Expected '!==' and instead saw '!='.","'Form' is defined but never used.","'Button' is defined but never used.","'Icon' is defined but never used.","'List' is defined but never used.","'deleteItemCart' is assigned a value but never used.","'useSubscription' is defined but never used.","'ItemAttachedOnChat' is defined but never used.","no-global-assign","no-unsafe-negation"]